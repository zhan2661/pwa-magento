{"version":3,"sources":["../../../src/actions/checkout/asyncActions.js"],"names":["RestApi","Util","closeDrawer","clearGuestCartId","createGuestCart","getCountries","getOrderInformation","getAccountInformation","checkoutReceiptActions","actions","request","Magento2","BrowserPersistence","storage","beginCheckout","thunk","dispatch","begin","getShippingMethods","cancelCheckout","reset","resetCheckout","editOrder","section","edit","getState","cart","guestCartId","arguments","response","method","body","JSON","stringify","address","country_id","postcode","receive","error","status","submitPaymentMethodAndBillingAddress","payload","submitBillingAddress","formValues","billingAddress","submitPaymentMethod","paymentMethod","submit","directory","Error","desiredBillingAddress","sameAsShippingAddress","countries","formatAddress","reject","saveBillingAddress","accept","savePaymentMethod","submitShippingAddress","shippingAddress","incorrectAddressMessage","message","saveShippingAddress","submitShippingMethod","shippingMethod","desiredShippingMethod","saveShippingMethod","submitOrder","order","billing_address","retrieveBillingAddress","retrievePaymentMethod","shipping_address","retrieveShippingAddress","shipping_method","retrieveShippingMethod","email","firstname","lastname","telephone","addressInformation","shipping_carrier_code","carrier_code","shipping_method_code","method_code","cartId","additional_data","payment_method_nonce","data","nonce","code","setOrderInformation","clearBillingAddress","clearPaymentMethod","clearShippingAddress","clearShippingMethod","createAccount","history","accountInfo","push","URLSearchParams","continueShopping","country","find","id","region_code","available_regions","regions","region","region_id","name","removeItem","getItem","setItem"],"mappings":"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","sourcesContent":["import { RestApi, Util } from '@magento/peregrine';\n\nimport { closeDrawer } from 'src/actions/app';\nimport { clearGuestCartId, createGuestCart } from 'src/actions/cart';\nimport { getCountries } from 'src/actions/directory';\nimport { getOrderInformation } from 'src/selectors/cart';\nimport { getAccountInformation } from 'src/selectors/checkoutReceipt';\nimport checkoutReceiptActions from 'src/actions/checkoutReceipt';\nimport actions from './actions';\n\nconst { request } = RestApi.Magento2;\nconst { BrowserPersistence } = Util;\nconst storage = new BrowserPersistence();\n\nexport const beginCheckout = () =>\n    async function thunk(dispatch) {\n        dispatch(actions.begin());\n        dispatch(getShippingMethods());\n        dispatch(getCountries());\n    };\n\nexport const cancelCheckout = () =>\n    async function thunk(dispatch) {\n        dispatch(actions.reset());\n    };\n\nexport const resetCheckout = () =>\n    async function thunk(dispatch) {\n        await dispatch(closeDrawer());\n        await dispatch(createGuestCart());\n        dispatch(actions.reset());\n    };\n\nexport const editOrder = section =>\n    async function thunk(dispatch) {\n        dispatch(actions.edit(section));\n    };\n\nexport const getShippingMethods = () => {\n    return async function thunk(dispatch, getState) {\n        const { cart } = getState();\n        const { guestCartId } = cart;\n\n        try {\n            // if there isn't a guest cart, create one\n            // then retry this operation\n            if (!guestCartId) {\n                await dispatch(createGuestCart());\n                return thunk(...arguments);\n            }\n\n            dispatch(actions.getShippingMethods.request(guestCartId));\n\n            const response = await request(\n                `/rest/V1/guest-carts/${guestCartId}/estimate-shipping-methods`,\n                {\n                    method: 'POST',\n                    body: JSON.stringify({\n                        address: {\n                            country_id: 'US',\n                            postcode: null\n                        }\n                    })\n                }\n            );\n\n            dispatch(actions.getShippingMethods.receive(response));\n        } catch (error) {\n            const { response } = error;\n\n            dispatch(actions.getShippingMethods.receive(error));\n\n            // check if the guest cart has expired\n            if (response && response.status === 404) {\n                // if so, clear it out, get a new one, and retry.\n                await clearGuestCartId();\n                await dispatch(createGuestCart());\n                return thunk(...arguments);\n            }\n        }\n    };\n};\n\nexport const submitPaymentMethodAndBillingAddress = payload =>\n    async function thunk(dispatch, getState) {\n        submitBillingAddress(payload.formValues.billingAddress)(\n            dispatch,\n            getState\n        );\n        submitPaymentMethod(payload.formValues.paymentMethod)(\n            dispatch,\n            getState\n        );\n    };\n\nexport const submitBillingAddress = payload =>\n    async function thunk(dispatch, getState) {\n        dispatch(actions.billingAddress.submit(payload));\n\n        const { cart, directory } = getState();\n\n        const { guestCartId } = cart;\n        if (!guestCartId) {\n            throw new Error('Missing required information: guestCartId');\n        }\n\n        let desiredBillingAddress = payload;\n        if (!payload.sameAsShippingAddress) {\n            const { countries } = directory;\n            try {\n                desiredBillingAddress = formatAddress(payload, countries);\n            } catch (error) {\n                dispatch(actions.billingAddress.reject(error));\n                return;\n            }\n        }\n\n        await saveBillingAddress(desiredBillingAddress);\n        dispatch(actions.billingAddress.accept(desiredBillingAddress));\n    };\n\nexport const submitPaymentMethod = payload =>\n    async function thunk(dispatch, getState) {\n        dispatch(actions.paymentMethod.submit(payload));\n\n        const { cart } = getState();\n\n        const { guestCartId } = cart;\n        if (!guestCartId) {\n            throw new Error('Missing required information: guestCartId');\n        }\n\n        await savePaymentMethod(payload);\n        dispatch(actions.paymentMethod.accept(payload));\n    };\n\nexport const submitShippingAddress = payload =>\n    async function thunk(dispatch, getState) {\n        dispatch(actions.shippingAddress.submit(payload));\n\n        const { cart, directory } = getState();\n\n        const { guestCartId } = cart;\n        if (!guestCartId) {\n            throw new Error('Missing required information: guestCartId');\n        }\n\n        const { countries } = directory;\n        let { formValues: address } = payload;\n        try {\n            address = formatAddress(address, countries);\n        } catch (error) {\n            dispatch(\n                actions.shippingAddress.reject({\n                    incorrectAddressMessage: error.message\n                })\n            );\n            return null;\n        }\n\n        await saveShippingAddress(address);\n        dispatch(actions.shippingAddress.accept(address));\n    };\n\nexport const submitShippingMethod = payload =>\n    async function thunk(dispatch, getState) {\n        dispatch(actions.shippingMethod.submit(payload));\n\n        const { cart } = getState();\n        const { guestCartId } = cart;\n        if (!guestCartId) {\n            throw new Error('Missing required information: guestCartId');\n        }\n\n        const desiredShippingMethod = payload.formValues.shippingMethod;\n        await saveShippingMethod(desiredShippingMethod);\n        dispatch(actions.shippingMethod.accept(desiredShippingMethod));\n    };\n\nexport const submitOrder = () =>\n    async function thunk(dispatch, getState) {\n        dispatch(actions.order.submit());\n\n        const { cart } = getState();\n        const { guestCartId } = cart;\n        if (!guestCartId) {\n            throw new Error('Missing required information: guestCartId');\n        }\n\n        let billing_address = await retrieveBillingAddress();\n        const paymentMethod = await retrievePaymentMethod();\n        const shipping_address = await retrieveShippingAddress();\n        const shipping_method = await retrieveShippingMethod();\n\n        if (billing_address.sameAsShippingAddress) {\n            billing_address = shipping_address;\n        } else {\n            const { email, firstname, lastname, telephone } = shipping_address;\n\n            billing_address = {\n                email,\n                firstname,\n                lastname,\n                telephone,\n                ...billing_address\n            };\n        }\n\n        try {\n            // POST to shipping-information to submit the shipping address and shipping method.\n            await request(\n                `/rest/V1/guest-carts/${guestCartId}/shipping-information`,\n                {\n                    method: 'POST',\n                    body: JSON.stringify({\n                        addressInformation: {\n                            billing_address,\n                            shipping_address,\n                            shipping_carrier_code: shipping_method.carrier_code,\n                            shipping_method_code: shipping_method.method_code\n                        }\n                    })\n                }\n            );\n\n            // POST to payment-information to submit the payment details and billing address,\n            // Note: this endpoint also actually submits the order.\n            const response = await request(\n                `/rest/V1/guest-carts/${guestCartId}/payment-information`,\n                {\n                    method: 'POST',\n                    body: JSON.stringify({\n                        billingAddress: billing_address,\n                        cartId: guestCartId,\n                        email: shipping_address.email,\n                        paymentMethod: {\n                            additional_data: {\n                                payment_method_nonce: paymentMethod.data.nonce\n                            },\n                            method: paymentMethod.code\n                        }\n                    })\n                }\n            );\n\n            dispatch(\n                checkoutReceiptActions.setOrderInformation(\n                    getOrderInformation(getState(), response)\n                )\n            );\n\n            // Clear out everything we've saved about this cart from local storage.\n            await clearBillingAddress();\n            await clearGuestCartId();\n            await clearPaymentMethod();\n            await clearShippingAddress();\n            await clearShippingMethod();\n\n            dispatch(actions.order.accept(response));\n        } catch (error) {\n            dispatch(actions.order.reject(error));\n        }\n    };\n\nexport const createAccount = history => async (dispatch, getState) => {\n    const accountInfo = getAccountInformation(getState());\n\n    await dispatch(resetCheckout());\n\n    history.push(`/create-account?${new URLSearchParams(accountInfo)}`);\n};\n\nexport const continueShopping = history => async dispatch => {\n    await dispatch(resetCheckout());\n\n    history.push('/');\n};\n\n/* helpers */\n\nexport function formatAddress(address = {}, countries = []) {\n    const country = countries.find(({ id }) => id === 'US');\n    const { region_code } = address;\n    const { available_regions: regions } = country;\n    const region = regions.find(({ code }) => code === region_code);\n\n    return {\n        country_id: 'US',\n        region_id: region.id,\n        region_code: region.code,\n        region: region.name,\n        ...address\n    };\n}\n\nasync function clearBillingAddress() {\n    return storage.removeItem('billing_address');\n}\n\nasync function retrieveBillingAddress() {\n    return storage.getItem('billing_address');\n}\n\nasync function saveBillingAddress(address) {\n    return storage.setItem('billing_address', address);\n}\n\nasync function clearPaymentMethod() {\n    return storage.removeItem('paymentMethod');\n}\n\nasync function retrievePaymentMethod() {\n    return storage.getItem('paymentMethod');\n}\n\nasync function savePaymentMethod(method) {\n    return storage.setItem('paymentMethod', method);\n}\n\nasync function clearShippingAddress() {\n    return storage.removeItem('shipping_address');\n}\n\nasync function retrieveShippingAddress() {\n    return storage.getItem('shipping_address');\n}\n\nasync function saveShippingAddress(address) {\n    return storage.setItem('shipping_address', address);\n}\n\nasync function clearShippingMethod() {\n    return storage.removeItem('shippingMethod');\n}\n\nasync function retrieveShippingMethod() {\n    return storage.getItem('shippingMethod');\n}\n\nasync function saveShippingMethod(method) {\n    return storage.setItem('shippingMethod', method);\n}\n"],"file":"asyncActions.js"}