{"version":3,"sources":["../../src/util/createErrorRecord.js"],"names":["errorRecords","WeakMap","error","logError","console","errorRecord","window","context","customStack","Date","Math","record","get","loc","constructor","message","name","seconds","getSeconds","randomChar","random","toString","slice","toUpperCase","id","stack","Error","captureStackTrace","messageStart","indexOf","traceStart","length","replace","location","origin","trim","split","set","process","env","NODE_ENV"],"mappings":"AAAA;AACA,MAAMA,YAAY,GAAG,IAAIC,OAAJ,EAArB;AACA,MAAM;AAAEC,EAAAA,KAAK,EAAEC;AAAT,IAAsBC,OAA5B;AAEA;;;;;;;;;;;AAUA,eAAe,SAASC,WAAT,CAAqBH,KAArB,EAA4BI,MAA5B,EAAoCC,OAApC,EAA6CC,WAA7C,EAA0D;AACrE,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAiBJ,MAAvB;AACA,MAAIK,MAAM,GAAGX,YAAY,CAACY,GAAb,CAAiBV,KAAjB,CAAb;;AACA,MAAIS,MAAJ,EAAY;AACR,WAAOA,MAAP;AACH;;AACDA,EAAAA,MAAM,GAAG;AAAET,IAAAA,KAAF;AAASW,IAAAA,GAAG,EAAE;AAAd,GAAT;AACA,QAAM;AAAEC,IAAAA,WAAF;AAAeC,IAAAA,OAAf;AAAwBC,IAAAA;AAAxB,MAAiCd,KAAvC,CAPqE,CAQrE;;AACA,QAAMe,OAAO,GAAG,IAAIR,IAAJ,GAAWS,UAAX,EAAhB;AACA,QAAMC,UAAU,GAAGT,IAAI,CAACU,MAAL,GACdC,QADc,CACL,EADK,EAEdC,KAFc,CAER,CAFQ,EAEL,CAFK,EAGdC,WAHc,EAAnB;AAIAZ,EAAAA,MAAM,CAACa,EAAP,GACI,CAAEV,WAAW,IAAIA,WAAW,CAACE,IAA5B,IAAqCA,IAAtC,IAA8CC,OAA9C,GAAwDE,UAD5D,CAdqE,CAiBrE;;AACA,MAAIM,KAAJ;;AACA,MAAIjB,WAAJ,EAAiB;AACbiB,IAAAA,KAAK,GAAGjB,WAAR;AACH,GAFD,MAEO;AACH;AACA,QAAIkB,KAAK,CAACC,iBAAV,EAA6B;AACzBD,MAAAA,KAAK,CAACC,iBAAN,CAAwBzB,KAAxB,EAA+BK,OAA/B;AACH;;AACDkB,IAAAA,KAAK,GAAGvB,KAAK,CAACuB,KAAd;AACH;;AACD,QAAMG,YAAY,GAAGH,KAAK,CAACI,OAAN,CAAcd,OAAd,CAArB;;AACA,MAAIa,YAAY,GAAG,CAAC,CAApB,EAAuB;AACnB,UAAME,UAAU,GAAGF,YAAY,GAAGb,OAAO,CAACgB,MAA1C;AACApB,IAAAA,MAAM,CAACE,GAAP,GAAaY,KAAK,CACbH,KADQ,CACFQ,UADE,EAERE,OAFQ,CAEA1B,MAAM,CAAC2B,QAAP,CAAgBC,MAFhB,EAEwB,EAFxB,EAGRC,IAHQ,GAIRC,KAJQ,CAIF,IAJE,EAII,CAJJ,CAAb;AAKH;;AACDpC,EAAAA,YAAY,CAACqC,GAAb,CAAiBnC,KAAjB,EAAwBS,MAAxB,EArCqE,CAsCrE;AACA;;AACA;;AACA,MAAI2B,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACvCrC,IAAAA,QAAQ,CACH,eAAcQ,MAAM,CAACa,EAAG,EADrB,EAEJ,yDAFI,EAGJC,KAHI,CAAR;AAKH;;AACD,SAAOd,MAAP;AACH","sourcesContent":["// Cache the generated error records, but let them be garbage collected.\nconst errorRecords = new WeakMap();\nconst { error: logError } = console;\n\n/**\n * This function builds an {error, id, loc} tuple from errors. It aids in\n * production-mode debugging by providing a unique ID to each error, plus a\n * hint as to the error source location, for a user to report on a support\n * call.\n * @param {Error} error The error to create or retrieve a record for.\n * @param {Window} window Window object, as an argument for testability.\n * @param {Object} context Context codesite to help make useful stacktraces.\n * @param {Object} customStack React custom stack trace for render errors.\n */\nexport default function errorRecord(error, window, context, customStack) {\n    const { Date, Math } = window;\n    let record = errorRecords.get(error);\n    if (record) {\n        return record;\n    }\n    record = { error, loc: '' };\n    const { constructor, message, name } = error;\n    // Reasonably unique, yet readable error ID.\n    const seconds = new Date().getSeconds();\n    const randomChar = Math.random()\n        .toString(36)\n        .slice(2, 3)\n        .toUpperCase();\n    record.id =\n        ((constructor && constructor.name) || name) + seconds + randomChar;\n\n    // Add offending line, if possible.\n    let stack;\n    if (customStack) {\n        stack = customStack;\n    } else {\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(error, context);\n        }\n        stack = error.stack;\n    }\n    const messageStart = stack.indexOf(message);\n    if (messageStart > -1) {\n        const traceStart = messageStart + message.length;\n        record.loc = stack\n            .slice(traceStart)\n            .replace(window.location.origin, '')\n            .trim()\n            .split('\\n')[0];\n    }\n    errorRecords.set(error, record);\n    // In development mode, React logs these already.\n    // Log in production mode so that users can give Support helpful debug info.\n    /* istanbul ignore next */\n    if (process.env.NODE_ENV === 'production') {\n        logError(\n            `%cUnhandled ${record.id}`,\n            'background: #CC0000; color: white; padding: 0.1em 0.5em',\n            stack\n        );\n    }\n    return record;\n}\n"],"file":"createErrorRecord.js"}