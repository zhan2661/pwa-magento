{"version":3,"sources":["../../src/util/makeUrl.js"],"names":["joinUrls","base","url","endsWith","slice","startsWith","mediaBases","Map","set","process","env","MAGENTO_BACKEND_MEDIA_PATH_PRODUCT","MAGENTO_BACKEND_MEDIA_PATH_CATEGORY","resizeBase","IMAGE_SERVICE_PATH","makeOptimizedUrl","path","type","width","location","window","urlObject","URL","href","params","URLSearchParams","search","has","Error","mediaBase","get","pathname","includes"],"mappings":"AAAA;AACA,MAAMA,QAAQ,GAAG,CAACC,IAAD,EAAOC,GAAP,KACb,CAACD,IAAI,CAACE,QAAL,CAAc,GAAd,IAAqBF,IAAI,CAACG,KAAL,CAAW,CAAX,EAAc,CAAC,CAAf,CAArB,GAAyCH,IAA1C,IACA,GADA,IAECC,GAAG,CAACG,UAAJ,CAAe,GAAf,IAAsBH,GAAG,CAACE,KAAJ,CAAU,CAAV,CAAtB,GAAqCF,GAFtC,CADJ;;AAKA,MAAMI,UAAU,GAAG,IAAIC,GAAJ,GACdC,GADc,CAEX,eAFW,EAGXC,OAAO,CAACC,GAAR,CAAYC,kCAAZ,IACI,wBAJO,EAMdH,GANc,CAOX,gBAPW,EAQXC,OAAO,CAACC,GAAR,CAAYE,mCAAZ,IACI,yBATO,CAAnB;AAYA,MAAMC,UAAU,GAAGb,QAAQ,CACvBS,OAAO,CAACC,GAAR,CAAYI,kBAAZ,IAAkC,OADX,EAEvB,UAFuB,CAA3B;AAIA;;;;;;;;;;;;;;;;;;;;AAmBA,MAAMC,gBAAgB,GAAG,CAACC,IAAD,EAAO;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,IAAkB,EAAzB,KAAgC;AACrD,QAAM;AAAEC,IAAAA;AAAF,MAAeC,MAArB;AACA,QAAMC,SAAS,GAAG,IAAIC,GAAJ,CAAQN,IAAR,EAAcG,QAAQ,CAACI,IAAvB,CAAlB;AACA,QAAMC,MAAM,GAAG,IAAIC,eAAJ,CAAoBJ,SAAS,CAACK,MAA9B,CAAf;;AAEA,MAAIT,IAAJ,EAAU;AACN,QAAI,CAACX,UAAU,CAACqB,GAAX,CAAeV,IAAf,CAAL,EAA2B;AACvB,YAAM,IAAIW,KAAJ,CAAW,2BAA0BX,IAAK,EAA1C,CAAN;AACH;;AAED,UAAMY,SAAS,GAAGvB,UAAU,CAACwB,GAAX,CAAeb,IAAf,CAAlB,CALM,CAON;;AACA,QAAI,CAACI,SAAS,CAACU,QAAV,CAAmBC,QAAnB,CAA4BH,SAA5B,CAAL,EAA6C;AACzCR,MAAAA,SAAS,CAACU,QAAV,GAAqB/B,QAAQ,CAAC6B,SAAD,EAAYR,SAAS,CAACU,QAAtB,CAA7B;AACH,KAVK,CAYN;;AACH;;AAED,MAAIb,KAAJ,EAAW;AACP;AACA;AACAM,IAAAA,MAAM,CAAChB,GAAP,CAAW,KAAX,EAAkBa,SAAS,CAACU,QAA5B;AAEA,WAAQ,GAAElB,UAAW,GAAEK,KAAM,IAAGM,MAAO,EAAvC;AACH,GA1BoD,CA4BrD;;;AACA,SAAOP,IAAI,GAAGI,SAAS,CAACU,QAAb,GAAwBf,IAAnC;AACH,CA9BD;;AAgCA,eAAeD,gBAAf","sourcesContent":["// ensure there's exactly one slash between segments\nconst joinUrls = (base, url) =>\n    (base.endsWith('/') ? base.slice(0, -1) : base) +\n    '/' +\n    (url.startsWith('/') ? url.slice(1) : url);\n\nconst mediaBases = new Map()\n    .set(\n        'image-product',\n        process.env.MAGENTO_BACKEND_MEDIA_PATH_PRODUCT ||\n            '/media/catalog/product'\n    )\n    .set(\n        'image-category',\n        process.env.MAGENTO_BACKEND_MEDIA_PATH_CATEGORY ||\n            '/media/catalog/category'\n    );\n\nconst resizeBase = joinUrls(\n    process.env.IMAGE_SERVICE_PATH || '/img/',\n    '/resize/'\n);\n/**\n * Creates an \"optimized\" url for a provided absolute or relative url based on\n * requested media type and width.\n *\n * If a `type` is provided the `path` will be joined with the associated media\n * base.\n *  - \"/media/catalog/product/some/path/to/img.jpg\"\n *\n * If a `width` is provided a \"resize url\" is returned using the desired width\n * and original media url.\n *  - /img/resize/640?url=%2Fmedia%2Fcatalog%2Fproduct%2Fsome%2Fpath%2Fto%2F/image.jpg\n *\n * If only `path` is provided it is returned unaltered.\n *\n * @param {string} path - absolute or relative url to resource.\n * @param {Object} props - properties describing desired optimizations\n * @param {string} props.type - \"image-product\" or \"image-category\"\n * @param {number} props.width - the desired resize width of the image\n */\nconst makeOptimizedUrl = (path, { type, width } = {}) => {\n    const { location } = window;\n    const urlObject = new URL(path, location.href);\n    const params = new URLSearchParams(urlObject.search);\n\n    if (type) {\n        if (!mediaBases.has(type)) {\n            throw new Error(`Unrecognized media type ${type}`);\n        }\n\n        const mediaBase = mediaBases.get(type);\n\n        // prepend media base if it isn't already part of the pathname\n        if (!urlObject.pathname.includes(mediaBase)) {\n            urlObject.pathname = joinUrls(mediaBase, urlObject.pathname);\n        }\n\n        // check for width before returning\n    }\n\n    if (width) {\n        // set pathname as query param\n        // encodeURIComponent would be redundant\n        params.set('url', urlObject.pathname);\n\n        return `${resizeBase}${width}?${params}`;\n    }\n\n    // return unaltered path if we didn't operate on it\n    return type ? urlObject.pathname : path;\n};\n\nexport default makeOptimizedUrl;\n"],"file":"makeUrl.js"}