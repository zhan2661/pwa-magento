{"version":3,"sources":["../../src/util/formValidators.js"],"names":["hasLengthAtLeast","value","values","minimumLength","length","hasLengthAtMost","maximumLength","hasLengthExactly","isRequired","trim","validateEmail","regex","test","validateRegionCode","countries","country","find","id","available_regions","regions","Array","isArray","region","code"],"mappings":"AAAA;;;;;;;AAQA,OAAO,MAAMA,gBAAgB,GAAG,CAACC,KAAD,EAAQC,MAAR,EAAgBC,aAAhB,KAAkC;AAC9D,MAAI,CAACF,KAAD,IAAUA,KAAK,CAACG,MAAN,GAAeD,aAA7B,EAA4C;AACxC,WAAQ,yBAAwBA,aAAc,gBAA9C;AACH;AACJ,CAJM;AAMP,OAAO,MAAME,eAAe,GAAG,CAACJ,KAAD,EAAQC,MAAR,EAAgBI,aAAhB,KAAkC;AAC7D,MAAIL,KAAK,IAAIA,KAAK,CAACG,MAAN,GAAeE,aAA5B,EAA2C;AACvC,WAAQ,mBAAkBA,aAAc,gBAAxC;AACH;AACJ,CAJM;AAMP,OAAO,MAAMC,gBAAgB,GAAG,CAACN,KAAD,EAAQC,MAAR,EAAgBE,MAAhB,KAA2B;AACvD,MAAIH,KAAK,IAAIA,KAAK,CAACG,MAAN,KAAiBA,MAA9B,EAAsC;AAClC,WAAQ,wBAAuBA,MAAO,gBAAtC;AACH;AACJ,CAJM;AAMP,OAAO,MAAMI,UAAU,GAAGP,KAAK,IAAI;AAC/B,SAAO,CAAC,CAACA,KAAK,IAAI,EAAV,EAAcQ,IAAd,EAAD,GAAwB,wBAAxB,GAAmD,IAA1D;AACH,CAFM;AAIP,OAAO,MAAMC,aAAa,GAAGT,KAAK,IAAI;AAClC,MAAI,CAACA,KAAL,EAAY;AACR,WAAO,IAAP;AACH;;AAED,QAAMU,KAAK,GAAG,wJAAd;AAEA,SAAO,CAACA,KAAK,CAACC,IAAN,CAAWX,KAAX,CAAD,GACD,8DADC,GAED,IAFN;AAGH,CAVM;AAYP,OAAO,MAAMY,kBAAkB,GAAG,CAACZ,KAAD,EAAQC,MAAR,EAAgBY,SAAhB,KAA8B;AAC5D,MAAI,CAACb,KAAL,EAAY;AACR,WAAO,IAAP;AACH;;AAED,QAAMc,OAAO,GAAGD,SAAS,CAACE,IAAV,CAAe,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAYA,EAAE,KAAK,IAAlC,CAAhB;;AAEA,MAAI,CAACF,OAAL,EAAc;AACV,WAAO,2CAAP;AACH;;AACD,QAAM;AAAEG,IAAAA,iBAAiB,EAAEC;AAArB,MAAiCJ,OAAvC;;AAEA,MAAI,EAAEK,KAAK,CAACC,OAAN,CAAcF,OAAd,KAA0BA,OAAO,CAACf,MAApC,CAAJ,EAAiD;AAC7C,WAAO,sDAAP;AACH;;AAED,QAAMkB,MAAM,GAAGH,OAAO,CAACH,IAAR,CAAa,CAAC;AAAEO,IAAAA;AAAF,GAAD,KAAcA,IAAI,KAAKtB,KAApC,CAAf;;AACA,MAAI,CAACqB,MAAL,EAAa;AACT,WAAQ,UAASrB,KAAM,uCAAvB;AACH;;AAED,SAAO,IAAP;AACH,CAtBM","sourcesContent":["/**\n * @fileoverview This file houses functions that can be used for\n * validation of form fields.\n *\n * Note that these functions should return a string error message\n * when they fail, and `null` when they pass.\n */\n\nexport const hasLengthAtLeast = (value, values, minimumLength) => {\n    if (!value || value.length < minimumLength) {\n        return `Must contain at least ${minimumLength} character(s).`;\n    }\n};\n\nexport const hasLengthAtMost = (value, values, maximumLength) => {\n    if (value && value.length > maximumLength) {\n        return `Must not exceed ${maximumLength} character(s).`;\n    }\n};\n\nexport const hasLengthExactly = (value, values, length) => {\n    if (value && value.length !== length) {\n        return `Must contain exactly ${length} character(s).`;\n    }\n};\n\nexport const isRequired = value => {\n    return !(value || '').trim() ? 'The field is required.' : null;\n};\n\nexport const validateEmail = value => {\n    if (!value) {\n        return null;\n    }\n\n    const regex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n    return !regex.test(value)\n        ? 'Please enter a valid email address (Ex: johndoe@domain.com).'\n        : null;\n};\n\nexport const validateRegionCode = (value, values, countries) => {\n    if (!value) {\n        return null;\n    }\n\n    const country = countries.find(({ id }) => id === 'US');\n\n    if (!country) {\n        return 'Country \"US\" is not an available country.';\n    }\n    const { available_regions: regions } = country;\n\n    if (!(Array.isArray(regions) && regions.length)) {\n        return 'Country \"US\" does not contain any available regions.';\n    }\n\n    const region = regions.find(({ code }) => code === value);\n    if (!region) {\n        return `State \"${value}\" is not an valid state abbreviation.`;\n    }\n\n    return null;\n};\n"],"file":"formValidators.js"}