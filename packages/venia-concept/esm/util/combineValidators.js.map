{"version":3,"sources":["../../src/util/combineValidators.js"],"names":["callbacks","Array","isArray","Error","value","values","result","i","length","callback","extendedCallback","extendedParam"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCA,gBAAeA,SAAS,IAAI;AACxB,MAAIA,SAAS,IAAI,IAAb,IAAqB,CAACC,KAAK,CAACC,OAAN,CAAcF,SAAd,CAA1B,EAAoD;AAChD,UAAM,IAAIG,KAAJ,CAAU,mCAAV,CAAN;AACH;;AAED,SAAO,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACtB,QAAIC,MAAM,GAAG,IAAb;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,SAAS,CAACQ,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACvC,YAAME,QAAQ,GAAGT,SAAS,CAACO,CAAD,CAA1B;;AAEA,UACIE,QAAQ,IAAI,IAAZ,IACC,CAACR,KAAK,CAACC,OAAN,CAAcO,QAAd,CAAD,IAA4B,OAAOA,QAAP,KAAoB,UAFrD,EAGE;AACE,cAAM,IAAIN,KAAJ,CACF,yBAAyBI,CAAzB,GAA6B,6BAD3B,CAAN;AAGH;;AAED,UAAIN,KAAK,CAACC,OAAN,CAAcO,QAAd,CAAJ,EAA6B;AACzB,cAAM,CAACC,gBAAD,EAAmBC,aAAnB,IAAoCF,QAA1C;;AAEA,YAAI,OAAOC,gBAAP,KAA4B,UAAhC,EAA4C;AACxC,gBAAM,IAAIP,KAAJ,CACF,yBAAyBI,CAAzB,GAA6B,uBAD3B,CAAN;AAGH;;AAEDD,QAAAA,MAAM,GAAGI,gBAAgB,CAACN,KAAD,EAAQC,MAAR,EAAgBM,aAAhB,CAAzB;AACH,OAVD,MAUO;AACHL,QAAAA,MAAM,GAAGG,QAAQ,CAACL,KAAD,EAAQC,MAAR,CAAjB;AACH;;AAED,UAAIC,MAAJ,EAAY;AACR;AACH;AACJ;;AAED,WAAOA,MAAP;AACH,GAnCD;AAoCH,CAzCD","sourcesContent":["/**\n * The function purpose is to group validation callbacks into a chain within single callback function.\n *\n * The single callback function should be passed as `validation` prop to an input component. It's being\n * called by the React Controller on a form submit.\n * The `callbacks` param is the array contains validators. Each validator should be either function or array. In case of a\n * validator is a function it is called the same way as React Controller does, with a field `value` and a form `values` params. If\n * the validator is an array, this means that it is extended validator which requires additional param for configuration.\n * The first index of that array should be a extended validator function, the second index is extended param, which is needed for\n * that function. So the function is called with three params on the form submit, with a field `value`, a form `values`\n * and an `extended param`.\n *\n * Example usage of the function:\n *\n * <input validate={combine([\n * foo\n * ])} .../>\n *\n * foo - validation function\n * It will be called on form submitting within chain as:\n * `foo(value, values)`\n *\n * Example usage of the function with extended callback:\n *\n * <input validate={combine([\n * [foo, bar]\n * ])} .../>\n *\n * foo - extended validator\n * bar - additional param\n * It will be called on form submitting within chain as:\n * `foo(value, values, bar)`\n *\n * Each callback being called one after another, according to their index in callbacks array, if one item returned the error\n * message, validation is failed, and rest validator are not supposed to be called.\n *\n * @param {Array} callbacks\n * @return {function(value, values): *}\n */\nexport default callbacks => {\n    if (callbacks == null || !Array.isArray(callbacks)) {\n        throw new Error('Expected `callbacks` to be array.');\n    }\n\n    return (value, values) => {\n        let result = null;\n\n        for (let i = 0; i < callbacks.length; i++) {\n            const callback = callbacks[i];\n\n            if (\n                callback == null ||\n                (!Array.isArray(callback) && typeof callback !== 'function')\n            ) {\n                throw new Error(\n                    'Expected `callbacks[' + i + ']` to be array or function.'\n                );\n            }\n\n            if (Array.isArray(callback)) {\n                const [extendedCallback, extendedParam] = callback;\n\n                if (typeof extendedCallback !== 'function') {\n                    throw new Error(\n                        'Expected `callbacks[' + i + '][0]` to be function.'\n                    );\n                }\n\n                result = extendedCallback(value, values, extendedParam);\n            } else {\n                result = callback(value, values);\n            }\n\n            if (result) {\n                break;\n            }\n        }\n\n        return result;\n    };\n};\n"],"file":"combineValidators.js"}