{"version":3,"sources":["../../src/util/getNamedExport.js"],"names":["getNamedExport","obj","name","Promise","resolve","then","mod","Error","hasOwnProperty"],"mappings":"AAAA;;;;;;;AAOA,MAAMA,cAAc,GAAG,CAACC,GAAD,EAAMC,IAAI,GAAG,SAAb,KACnBC,OAAO,CAACC,OAAR,CAAgBH,GAAhB,EAAqBI,IAArB,CAA0BC,GAAG,IAAI;AAC7B,MAAI,CAACA,GAAD,IAAQ,OAAOA,GAAP,KAAe,QAA3B,EAAqC;AACjC,UAAM,IAAIC,KAAJ,CAAU,oCAAV,CAAN;AACH;;AAED,MAAI,CAACD,GAAG,CAACE,cAAJ,CAAmBN,IAAnB,CAAL,EAA+B;AAC3B,UAAM,IAAIK,KAAJ,CAAW,WAAUL,IAAK,aAA1B,CAAN;AACH;;AAED,SAAOI,GAAG,CAACJ,IAAD,CAAV;AACH,CAVD,CADJ;;AAaA,eAAeF,cAAf","sourcesContent":["/**\n * Retrieve a single exported binding from a module.\n *\n * @param {object} obj - A module's namespace object\n * @param {string} name - The binding to retrieve\n * @returns {Promise<*>}\n */\nconst getNamedExport = (obj, name = 'default') =>\n    Promise.resolve(obj).then(mod => {\n        if (!mod || typeof mod !== 'object') {\n            throw new Error('Invalid namespace object provided.');\n        }\n\n        if (!mod.hasOwnProperty(name)) {\n            throw new Error(`Binding ${name} not found.`);\n        }\n\n        return mod[name];\n    });\n\nexport default getNamedExport;\n"],"file":"getNamedExport.js"}