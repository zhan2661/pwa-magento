{"version":3,"sources":["../../../src/RootComponents/Category/category.js"],"names":["React","Component","string","number","shape","compose","connect","Query","classify","setCurrentPage","setPrevPageTotal","loadingIndicator","CategoryContent","defaultClasses","categoryQuery","Category","componentDidUpdate","prevProps","props","currentPage","window","scrollTo","render","id","classes","pageSize","prevPageTotal","pageControl","setPage","updateTotalPages","totalPages","Number","onServer","loading","error","data","pageCount","category","products","total_count","Math","ceil","totalWrapper","gallery","root","title","mapStateToProps","catalog","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { string, number, shape } from 'prop-types';\nimport { compose } from 'redux';\nimport { connect, Query } from 'src/drivers';\n\nimport classify from 'src/classify';\nimport { setCurrentPage, setPrevPageTotal } from 'src/actions/catalog';\nimport { loadingIndicator } from 'src/components/LoadingIndicator';\nimport CategoryContent from './categoryContent';\nimport defaultClasses from './category.css';\nimport categoryQuery from 'src/queries/getCategory.graphql';\n\nclass Category extends Component {\n    static propTypes = {\n        id: number,\n        classes: shape({\n            gallery: string,\n            root: string,\n            title: string\n        }),\n        currentPage: number,\n        pageSize: number,\n        prevPageTotal: number\n    };\n\n    // TODO: Should not be a default here, we just don't have\n    // the wiring in place to map route info down the tree (yet)\n    static defaultProps = {\n        id: 3\n    };\n\n    componentDidUpdate(prevProps) {\n        // If the current page has changed, scroll back up to the top.\n        if (this.props.currentPage !== prevProps.currentPage) {\n            window.scrollTo(0, 0);\n        }\n    }\n\n    render() {\n        const {\n            id,\n            classes,\n            currentPage,\n            pageSize,\n            prevPageTotal,\n            setCurrentPage,\n            setPrevPageTotal\n        } = this.props;\n\n        const pageControl = {\n            currentPage: currentPage,\n            setPage: setCurrentPage,\n            updateTotalPages: setPrevPageTotal,\n            totalPages: prevPageTotal\n        };\n\n        return (\n            <Query\n                query={categoryQuery}\n                variables={{\n                    id: Number(id),\n                    onServer: false,\n                    pageSize: Number(pageSize),\n                    currentPage: Number(currentPage)\n                }}\n            >\n                {({ loading, error, data }) => {\n                    if (error) return <div>Data Fetch Error</div>;\n                    // If our pagination component has mounted, then we have\n                    // a total page count in the store, so we continue to render\n                    // with our last known total\n                    if (loading)\n                        return pageControl.totalPages ? (\n                            <CategoryContent\n                                pageControl={pageControl}\n                                pageSize={pageSize}\n                            />\n                        ) : (\n                            loadingIndicator\n                        );\n\n                    // TODO: Retrieve the page total from GraphQL when ready\n                    const pageCount =\n                        data.category.products.total_count / pageSize;\n                    const totalPages = Math.ceil(pageCount);\n                    const totalWrapper = {\n                        ...pageControl,\n                        totalPages: totalPages\n                    };\n\n                    return (\n                        <CategoryContent\n                            classes={classes}\n                            pageControl={totalWrapper}\n                            data={data}\n                        />\n                    );\n                }}\n            </Query>\n        );\n    }\n}\n\nconst mapStateToProps = ({ catalog }) => {\n    return {\n        currentPage: catalog.currentPage,\n        pageSize: catalog.pageSize,\n        prevPageTotal: catalog.prevPageTotal\n    };\n};\nconst mapDispatchToProps = { setCurrentPage, setPrevPageTotal };\n\nexport default compose(\n    classify(defaultClasses),\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )\n)(Category);\n"],"file":"category.js"}