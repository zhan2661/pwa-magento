{"version":3,"sources":["../../../src/components/Checkout/paymentsForm.js"],"names":["React","Component","Fragment","Form","array","bool","func","shape","string","BraintreeDropin","Button","Checkbox","Field","TextInput","classify","defaultClasses","isObjectEmpty","isRequired","hasLengthExactly","validateRegionCode","combine","DEFAULT_FORM_VALUES","addresses_same","PaymentsForm","isRequestingPaymentNonce","classes","countries","props","street0","city","region_code","postcode","formState","submitting","body","heading","braintree","state","cancelPaymentNonceRequest","setPaymentNonce","address_check","values","billingAddressFields","footer","button","cancel","formApi","setState","value","formValue","getValue","sameAsShippingAddress","billingAddress","street","submit","paymentMethod","code","data","render","initialValues","formChildren","initialFormValues","root","setFormApi","textInput"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport { Form } from 'informed';\nimport { array, bool, func, shape, string } from 'prop-types';\n\nimport BraintreeDropin from './braintreeDropin';\nimport Button from 'src/components/Button';\nimport Checkbox from 'src/components/Checkbox';\nimport Field from 'src/components/Field';\nimport TextInput from 'src/components/TextInput';\nimport classify from 'src/classify';\n\nimport defaultClasses from './paymentsForm.css';\nimport isObjectEmpty from 'src/util/isObjectEmpty';\nimport {\n    isRequired,\n    hasLengthExactly,\n    validateRegionCode\n} from 'src/util/formValidators';\nimport combine from 'src/util/combineValidators';\n\nconst DEFAULT_FORM_VALUES = {\n    addresses_same: true\n};\n\nclass PaymentsForm extends Component {\n    static propTypes = {\n        cancel: func.isRequired,\n        classes: shape({\n            address_check: string,\n            body: string,\n            button: string,\n            braintree: string,\n            city: string,\n            footer: string,\n            heading: string,\n            postcode: string,\n            region_code: string,\n            street0: string,\n            textInput: string\n        }),\n        initialValues: shape({\n            city: string,\n            postcode: string,\n            region_code: string,\n            sameAsShippingAddress: bool,\n            street0: array\n        }),\n        submit: func.isRequired,\n        submitting: bool,\n        countries: array\n    };\n\n    static defaultProps = {\n        initialValues: {}\n    };\n\n    state = {\n        isRequestingPaymentNonce: false\n    };\n\n    render() {\n        const { classes, initialValues } = this.props;\n        const { formChildren } = this;\n\n        let initialFormValues;\n        if (isObjectEmpty(initialValues)) {\n            initialFormValues = DEFAULT_FORM_VALUES;\n        }\n        // We have some initial values, use them.\n        else {\n            if (initialValues.sameAsShippingAddress) {\n                // If the addresses are the same, don't populate any fields\n                // other than the checkbox with an initial value.\n                initialFormValues = {\n                    addresses_same: true\n                };\n            } else {\n                // The addresses are not the same, populate the other fields.\n                initialFormValues = {\n                    addresses_same: false,\n                    ...initialValues\n                };\n                delete initialFormValues.sameAsShippingAddress;\n            }\n        }\n\n        return (\n            <Form\n                className={classes.root}\n                getApi={this.setFormApi}\n                initialValues={initialFormValues}\n                onSubmit={this.submit}\n            >\n                {formChildren}\n            </Form>\n        );\n    }\n\n    /*\n     *  Class Properties.\n     */\n    billingAddressFields = () => {\n        const { classes, countries } = this.props;\n\n        return (\n            <Fragment>\n                <div className={classes.street0}>\n                    <Field label=\"Street\">\n                        <TextInput\n                            id={classes.street0}\n                            field=\"street[0]\"\n                            validate={isRequired}\n                        />\n                    </Field>\n                </div>\n                <div className={classes.city}>\n                    <Field label=\"City\">\n                        <TextInput\n                            id={classes.city}\n                            field=\"city\"\n                            validate={isRequired}\n                        />\n                    </Field>\n                </div>\n                <div className={classes.region_code}>\n                    <Field label=\"State\">\n                        <TextInput\n                            id={classes.region_code}\n                            field=\"region_code\"\n                            validate={combine([\n                                isRequired,\n                                [hasLengthExactly, 2],\n                                [validateRegionCode, countries]\n                            ])}\n                        />\n                    </Field>\n                </div>\n                <div className={classes.postcode}>\n                    <Field label=\"ZIP\">\n                        <TextInput\n                            id={classes.postcode}\n                            field=\"postcode\"\n                            validate={isRequired}\n                        />\n                    </Field>\n                </div>\n            </Fragment>\n        );\n    };\n\n    /*\n     *  Class Functions.\n     */\n    formChildren = ({ formState }) => {\n        const { classes, submitting } = this.props;\n\n        return (\n            <Fragment>\n                <div className={classes.body}>\n                    <h2 className={classes.heading}>Billing Information</h2>\n                    <div className={classes.braintree}>\n                        <BraintreeDropin\n                            isRequestingPaymentNonce={\n                                this.state.isRequestingPaymentNonce\n                            }\n                            onError={this.cancelPaymentNonceRequest}\n                            onSuccess={this.setPaymentNonce}\n                        />\n                    </div>\n                    <div className={classes.address_check}>\n                        <Checkbox\n                            field=\"addresses_same\"\n                            label=\"Billing address same as shipping address\"\n                        />\n                    </div>\n                    {!formState.values.addresses_same &&\n                        this.billingAddressFields()}\n                </div>\n                <div className={classes.footer}>\n                    <Button className={classes.button} onClick={this.cancel}>\n                        Cancel\n                    </Button>\n                    <Button\n                        className={classes.button}\n                        priority=\"high\"\n                        type=\"submit\"\n                        disabled={submitting}\n                    >\n                        Use Card\n                    </Button>\n                </div>\n            </Fragment>\n        );\n    };\n\n    setFormApi = formApi => {\n        this.formApi = formApi;\n    };\n\n    /*\n     *  Event Handlers.\n     */\n    cancel = () => {\n        this.props.cancel();\n    };\n\n    submit = () => {\n        this.setState({ isRequestingPaymentNonce: true });\n    };\n\n    setPaymentNonce = value => {\n        this.setState({\n            isRequestingPaymentNonce: false\n        });\n\n        // Build up the billing address payload.\n        const formValue = this.formApi.getValue;\n        const sameAsShippingAddress = formValue('addresses_same') || false;\n\n        let billingAddress;\n        if (!sameAsShippingAddress) {\n            billingAddress = {\n                city: formValue('city'),\n                postcode: formValue('postcode'),\n                region_code: formValue('region_code'),\n                street: formValue('street')\n            };\n        } else {\n            billingAddress = {\n                sameAsShippingAddress\n            };\n        }\n\n        // Submit the payment method and billing address payload.\n        this.props.submit({\n            billingAddress,\n            paymentMethod: {\n                code: 'braintree',\n                data: value\n            }\n        });\n    };\n\n    cancelPaymentNonceRequest = () => {\n        this.setState({ isRequestingPaymentNonce: false });\n    };\n}\n\nexport default classify(defaultClasses)(PaymentsForm);\n"],"file":"paymentsForm.js"}