{"version":3,"sources":["../../../src/components/Checkout/addressForm.js"],"names":["React","Component","Fragment","Form","memoize","bool","func","shape","string","array","classify","Button","defaultClasses","validateEmail","isRequired","hasLengthExactly","validateRegionCode","combine","TextInput","Field","fields","filterInitialValues","values","reduce","acc","key","AddressForm","isAddressIncorrect","incorrectAddressMessage","props","classes","submitting","countries","body","heading","firstname","lastname","street0","city","postcode","region_code","telephone","email","validation","validationBlock","footer","button","cancel","submit","render","children","initialValues","root","textInput"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport { Form } from 'informed';\nimport memoize from 'memoize-one';\nimport { bool, func, shape, string, array } from 'prop-types';\n\nimport classify from 'src/classify';\nimport Button from 'src/components/Button';\nimport defaultClasses from './addressForm.css';\nimport {\n    validateEmail,\n    isRequired,\n    hasLengthExactly,\n    validateRegionCode\n} from 'src/util/formValidators';\nimport combine from 'src/util/combineValidators';\nimport TextInput from 'src/components/TextInput';\nimport Field from 'src/components/Field';\n\nconst fields = [\n    'city',\n    'email',\n    'firstname',\n    'lastname',\n    'postcode',\n    'region_code',\n    'street',\n    'telephone'\n];\n\nconst filterInitialValues = memoize(values =>\n    fields.reduce((acc, key) => {\n        acc[key] = values[key];\n        return acc;\n    }, {})\n);\n\nclass AddressForm extends Component {\n    static propTypes = {\n        cancel: func.isRequired,\n        classes: shape({\n            body: string,\n            button: string,\n            city: string,\n            email: string,\n            firstname: string,\n            footer: string,\n            lastname: string,\n            postcode: string,\n            region_code: string,\n            street0: string,\n            telephone: string,\n            textInput: string,\n            validation: string\n        }),\n        incorrectAddressMessage: string,\n        submit: func.isRequired,\n        submitting: bool,\n        countries: array\n    };\n\n    static defaultProps = {\n        initialValues: {}\n    };\n\n    validationBlock = () => {\n        const { isAddressIncorrect, incorrectAddressMessage } = this.props;\n        if (isAddressIncorrect) {\n            return incorrectAddressMessage;\n        } else {\n            return null;\n        }\n    };\n\n    render() {\n        const { children, props } = this;\n        const { classes, initialValues } = props;\n        const values = filterInitialValues(initialValues);\n\n        return (\n            <Form\n                className={classes.root}\n                initialValues={values}\n                onSubmit={this.submit}\n            >\n                {children}\n            </Form>\n        );\n    }\n\n    children = () => {\n        const { classes, submitting, countries } = this.props;\n\n        return (\n            <Fragment>\n                <div className={classes.body}>\n                    <h2 className={classes.heading}>Shipping Address</h2>\n                    <div className={classes.firstname}>\n                        <Field label=\"First Name\">\n                            <TextInput\n                                id={classes.firstname}\n                                field=\"firstname\"\n                                validate={isRequired}\n                            />\n                        </Field>\n                    </div>\n                    <div className={classes.lastname}>\n                        <Field label=\"Last Name\">\n                            <TextInput\n                                id={classes.lastname}\n                                field=\"lastname\"\n                                validate={isRequired}\n                            />\n                        </Field>\n                    </div>\n                    <div className={classes.street0}>\n                        <Field label=\"Street\">\n                            <TextInput\n                                id={classes.street0}\n                                field=\"street[0]\"\n                                validate={isRequired}\n                            />\n                        </Field>\n                    </div>\n                    <div className={classes.city}>\n                        <Field label=\"City\">\n                            <TextInput\n                                id={classes.city}\n                                field=\"city\"\n                                validate={isRequired}\n                            />\n                        </Field>\n                    </div>\n                    <div className={classes.postcode}>\n                        <Field label=\"ZIP\">\n                            <TextInput\n                                id={classes.postcode}\n                                field=\"postcode\"\n                                validate={isRequired}\n                            />\n                        </Field>\n                    </div>\n                    <div className={classes.region_code}>\n                        <Field label=\"State\">\n                            <TextInput\n                                id={classes.region_code}\n                                field=\"region_code\"\n                                validate={combine([\n                                    isRequired,\n                                    [hasLengthExactly, 2],\n                                    [validateRegionCode, countries]\n                                ])}\n                            />\n                        </Field>\n                    </div>\n                    <div className={classes.telephone}>\n                        <Field label=\"Phone\">\n                            <TextInput\n                                id={classes.telephone}\n                                field=\"telephone\"\n                                validate={isRequired}\n                            />\n                        </Field>\n                    </div>\n                    <div className={classes.email}>\n                        <Field label=\"Email\">\n                            <TextInput\n                                id={classes.email}\n                                field=\"email\"\n                                validate={combine([isRequired, validateEmail])}\n                            />\n                        </Field>\n                    </div>\n                    <div className={classes.validation}>\n                        {this.validationBlock()}\n                    </div>\n                </div>\n                <div className={classes.footer}>\n                    <Button className={classes.button} onClick={this.cancel}>\n                        Cancel\n                    </Button>\n                    <Button\n                        className={classes.button}\n                        type=\"submit\"\n                        priority=\"high\"\n                        disabled={submitting}\n                    >\n                        Use Address\n                    </Button>\n                </div>\n            </Fragment>\n        );\n    };\n\n    cancel = () => {\n        this.props.cancel();\n    };\n\n    submit = values => {\n        this.props.submit(values);\n    };\n}\n\nexport default classify(defaultClasses)(AddressForm);\n\n/*\nconst mockAddress = {\n    country_id: 'US',\n    firstname: 'Veronica',\n    lastname: 'Costello',\n    street: ['6146 Honey Bluff Parkway'],\n    city: 'Calder',\n    postcode: '49628-7978',\n    region_id: 33,\n    region_code: 'MI',\n    region: 'Michigan',\n    telephone: '(555) 229-3326',\n    email: 'veronica@example.com'\n};\n*/\n"],"file":"addressForm.js"}