{"version":3,"sources":["../../../src/components/Checkout/braintreeDropin.js"],"names":["React","Component","bool","func","shape","string","Util","defaultClasses","classify","BrowserPersistence","storage","BRAINTREE_TOKEN","process","env","BraintreeDropin","isError","default","dropin","create","authorization","container","card","overrides","fields","number","maskInput","showLastFour","dropinInstance","paymentNonce","requestPaymentMethod","props","onSuccess","e","storedPayment","getItem","data","console","error","onError","componentDidMount","createDropinInstance","err","setState","componentDidUpdate","prevProps","isRequestingPaymentNonce","requestPaymentNonce","render","classes","state","root","isRequired"],"mappings":"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","sourcesContent":["/**\n * @fileoverview This component uses the BrainTree Web Drop In to\n * hook into Web Payments and the Payment Request API to\n * submit payments via BrainTree.\n *\n * See:\n * https://github.com/braintree/braintree-web-drop-in\n * https://braintree.github.io/braintree-web-drop-in/docs/current/index.html\n * https://developers.braintreepayments.com/guides/drop-in/overview/javascript/v3\n */\n\nimport React, { Component } from 'react';\nimport { bool, func, shape, string } from 'prop-types';\nimport { Util } from '@magento/peregrine';\n\nimport defaultClasses from './braintreeDropin.css';\nimport classify from 'src/classify';\n\nconst { BrowserPersistence } = Util;\nconst storage = new BrowserPersistence();\nconst { BRAINTREE_TOKEN } = process.env;\n\nclass BraintreeDropin extends Component {\n    static propTypes = {\n        classes: shape({\n            root: string\n        }),\n        isRequestingPaymentNonce: bool,\n        onError: func.isRequired,\n        onSuccess: func.isRequired\n    };\n\n    state = {\n        isError: false\n    };\n\n    async componentDidMount() {\n        let isError;\n\n        try {\n            this.dropinInstance = await this.createDropinInstance();\n            isError = false;\n        } catch (err) {\n            console.error(\n                `Unable to initialize Credit Card form (Braintree). \\n${err}`\n            );\n            isError = true;\n        }\n\n        this.setState({ isError });\n    }\n\n    componentDidUpdate(prevProps) {\n        const { dropinInstance } = this;\n        const { isRequestingPaymentNonce } = this.props;\n\n        if (\n            dropinInstance &&\n            isRequestingPaymentNonce &&\n            !prevProps.isRequestingPaymentNonce\n        ) {\n            // Our parent is telling us to request the payment nonce.\n            this.requestPaymentNonce();\n        }\n    }\n\n    render() {\n        const { classes } = this.props;\n        const { isError } = this.state;\n\n        if (isError) {\n            return (\n                <span className={classes.error}>\n                    There was an error loading payment options. Please try again\n                    later.\n                </span>\n            );\n        }\n\n        return (\n            <div className={classes.root}>\n                <div id=\"braintree-dropin-container\" />\n            </div>\n        );\n    }\n\n    createDropinInstance = async () => {\n        // import the dropin API\n        const { default: dropin } = await import('braintree-web-drop-in');\n\n        // Create an instance of the BrainTree Web Drop In.\n        return dropin.create({\n            authorization: BRAINTREE_TOKEN,\n            // Note: this selector must match to some part of this component's rendered HTML.\n            container: '#braintree-dropin-container',\n            card: {\n                overrides: {\n                    fields: {\n                        number: {\n                            maskInput: {\n                                // Only show the last four digits of the credit card number after focus exits this field.\n                                showLastFour: true\n                            }\n                        }\n                    }\n                }\n            }\n        });\n    };\n\n    /*\n     * @see https://developers.braintreepayments.com/guides/payment-method-nonces.\n     * @see https://braintree.github.io/braintree-web-drop-in/docs/current/Dropin.html#requestPaymentMethod.\n     */\n    requestPaymentNonce = async () => {\n        const { dropinInstance } = this;\n\n        try {\n            const paymentNonce = await dropinInstance.requestPaymentMethod();\n            this.props.onSuccess(paymentNonce);\n        } catch (e) {\n            // If payment details were missing or invalid but we have data from\n            // a previous successful submission, use the previous data.\n            const storedPayment = storage.getItem('paymentMethod');\n            if (storedPayment) {\n                this.props.onSuccess(storedPayment.data);\n                return;\n            }\n\n            // An error occurred and we have no stored data.\n            // BrainTree will update the UI with error messaging,\n            // but signal that there was an error.\n            console.error(`Invalid Payment Details. \\n${e}`);\n            this.props.onError();\n        }\n    };\n}\n\nexport default classify(defaultClasses)(BraintreeDropin);\n"],"file":"braintreeDropin.js"}