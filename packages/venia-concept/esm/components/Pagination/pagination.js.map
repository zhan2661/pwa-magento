{"version":3,"sources":["../../../src/components/Pagination/pagination.js"],"names":["React","Component","func","number","object","shape","string","withRouter","compose","classify","getQueryParameterValue","defaultClasses","NavButton","navButtons","tileBuffer","Pagination","pageNumber","shouldReplace","history","location","props","search","queryParams","URLSearchParams","method","set","toString","currentPage","pageControl","setPage","totalPages","selectedTile","leftBound","rightBound","leadTile","Math","max","queryPage","queryParameter","componentDidMount","updateTotalPages","syncPage","componentDidUpdate","componentWillUnmount","navigationTiles","classes","tiles","visibleBuffer","min","getLeadTile","i","tile","push","map","tileMarker","tileButton","render","rightSkip","leftSkip","isActiveLeft","isActiveRight","root","firstPage","name","buttonLabel","prevPage","slideNavLeft","nextPage","slideNavRight","lastPage"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { func, number, object, shape, string } from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { compose } from 'redux';\n\nimport classify from 'src/classify';\nimport getQueryParameterValue from 'src/util/getQueryParameterValue';\nimport defaultClasses from './pagination.css';\nimport NavButton from './navButton';\nimport { navButtons } from './constants';\n\nconst tileBuffer = 2;\n\nclass Pagination extends Component {\n    static propTypes = {\n        classes: shape({\n            root: string\n        }),\n        history: object,\n        location: object,\n        pageControl: shape({\n            currentPage: number,\n            setPage: func,\n            totalPages: number,\n            updateTotalPages: func\n        })\n    };\n\n    componentDidMount() {\n        // updateTotalPages pushes the current page count of a category query to\n        // redux so it knows how many tiles to render even in the Query\n        // component's loading state\n        const { updateTotalPages, totalPages } = this.props.pageControl;\n        updateTotalPages(totalPages);\n        this.syncPage();\n    }\n\n    componentDidUpdate() {\n        this.syncPage();\n    }\n\n    componentWillUnmount() {\n        // Reset page total to keep other instances from rendering incorrectly\n        const { updateTotalPages } = this.props.pageControl;\n        updateTotalPages(null);\n    }\n\n    get navigationTiles() {\n        const { classes, pageControl } = this.props;\n        const { currentPage, totalPages } = pageControl;\n\n        // Begin building page navigation tiles\n        const tiles = [];\n        const visibleBuffer = Math.min(tileBuffer * 2, totalPages - 1);\n        const leadTile = this.getLeadTile(currentPage, totalPages);\n\n        for (let i = leadTile; i <= leadTile + visibleBuffer; i++) {\n            const tile = i;\n            tiles.push(tile);\n        }\n        // End building page navigation tiles\n\n        return tiles.map(tile => {\n            const tileMarker =\n                tile == currentPage ? (\n                    <div className={classes.tileMarker} />\n                ) : null;\n            return (\n                <button\n                    className={classes.tileButton}\n                    key={tile}\n                    onClick={() => this.setPage(tile)}\n                >\n                    {tileMarker}\n                    {tile}\n                </button>\n            );\n        });\n    }\n\n    render() {\n        const { classes } = this.props;\n        const { currentPage, totalPages } = this.props.pageControl;\n        const { navigationTiles } = this;\n\n        if (!this.props.pageControl || totalPages == 1) {\n            return null;\n        }\n\n        const leadTile = this.getLeadTile(currentPage, totalPages);\n\n        const rightSkip = Math.min(\n            totalPages,\n            leadTile + tileBuffer * 2 + (tileBuffer + 1)\n        );\n        const leftSkip = Math.max(1, leadTile - (tileBuffer + 1));\n\n        const isActiveLeft = !(currentPage == 1);\n        const isActiveRight = !(currentPage == totalPages);\n\n        return (\n            <div className={classes.root}>\n                <NavButton\n                    name={navButtons.firstPage.name}\n                    active={isActiveLeft}\n                    onClick={() => this.setPage(leftSkip)}\n                    buttonLabel={navButtons.firstPage.buttonLabel}\n                />\n                <NavButton\n                    name={navButtons.prevPage.name}\n                    active={isActiveLeft}\n                    onClick={this.slideNavLeft}\n                    buttonLabel={navButtons.prevPage.buttonLabel}\n                />\n                {navigationTiles}\n                <NavButton\n                    name={navButtons.nextPage.name}\n                    active={isActiveRight}\n                    onClick={this.slideNavRight}\n                    buttonLabel={navButtons.nextPage.buttonLabel}\n                />\n                <NavButton\n                    name={navButtons.lastPage.name}\n                    active={isActiveRight}\n                    onClick={() => this.setPage(rightSkip)}\n                    buttonLabel={navButtons.lastPage.buttonLabel}\n                />\n            </div>\n        );\n    }\n\n    setPage = (pageNumber, shouldReplace = false) => {\n        const { history, location } = this.props;\n        const { search } = location;\n        const queryParams = new URLSearchParams(search);\n        const method = shouldReplace ? 'replace' : 'push';\n\n        queryParams.set('page', pageNumber);\n        history[method]({ search: queryParams.toString() });\n    };\n\n    slideNavLeft = () => {\n        const { currentPage } = this.props.pageControl;\n        if (currentPage > 1) {\n            this.setPage(currentPage - 1);\n        }\n    };\n\n    slideNavRight = () => {\n        const { currentPage, totalPages } = this.props.pageControl;\n        if (currentPage < totalPages) {\n            this.setPage(currentPage + 1);\n        }\n    };\n\n    getLeadTile = (currentPage, totalPages) => {\n        const selectedTile = currentPage;\n        const leftBound = 1 + tileBuffer;\n        const rightBound = totalPages - tileBuffer;\n\n        let leadTile = selectedTile - tileBuffer;\n        if (selectedTile < leftBound) {\n            leadTile = 1;\n        } else if (selectedTile > rightBound) {\n            leadTile = Math.max(totalPages - tileBuffer * 2, 1);\n        }\n        return leadTile;\n    };\n\n    syncPage = () => {\n        const { location, pageControl } = this.props;\n        const { currentPage, setPage, totalPages } = pageControl;\n\n        const queryPage = Math.max(\n            1,\n            // Note: The ~ operator is a bitwise NOT operator.\n            // Bitwise NOTing any number x yields -(x + 1). For example, ~-5 yields 4.\n            // Importantly, it truncates any fractional component of x. For example, ~-5.7 also yields 4.\n            // For positive numbers, applying this operator twice has the same effect as Math.floor.\n            ~~getQueryParameterValue({\n                location,\n                queryParameter: 'page'\n            })\n        );\n\n        // if the page in the query string doesn't match client state\n        // update client state\n        if (queryPage !== currentPage) {\n            // if the query page is not a valid page number\n            // set it to `1` instead\n            // and make sure to update the URL\n            if (queryPage > totalPages) {\n                this.setPage(1, true);\n            } else {\n                setPage(queryPage);\n            }\n        }\n    };\n}\n\nexport default compose(\n    withRouter,\n    classify(defaultClasses)\n)(Pagination);\n"],"file":"pagination.js"}