{"version":3,"sources":["../../../src/components/ProductOptions/swatch.js"],"names":["React","Component","bool","number","object","oneOfType","shape","string","classify","Icon","SwatchTooltip","CheckIcon","defaultClasses","memoizedGetRandomColor","getClassName","name","isSelected","hasFocus","Swatch","icon","props","render","classes","item","itemIndex","style","restProps","className","label","value_index","randomColor","finalStyle","Object","assign","root","isRequired"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,MAAvB,EAA+BC,SAA/B,EAA0CC,KAA1C,EAAiDC,MAAjD,QAA+D,YAA/D;AAEA,OAAOC,QAAP;AACA,OAAOC,IAAP;AACA,OAAOC,aAAP;AACA,OAAOC,SAAP,MAAsB,gCAAtB;AAEA,OAAOC,cAAP;AAEA,SAASC,sBAAT;;AAEA,MAAMC,YAAY,GAAG,CAACC,IAAD,EAAOC,UAAP,EAAmBC,QAAnB,KAChB,GAAEF,IAAK,GAAEC,UAAU,GAAG,WAAH,GAAiB,EAAG,GAAEC,QAAQ,GAAG,UAAH,GAAgB,EAAG,EADzE;;AAGA,MAAMC,MAAN,SAAqBjB,SAArB,CAA+B;AAoB3B,MAAIkB,IAAJ,GAAW;AACP,UAAM;AAAEH,MAAAA;AAAF,QAAiB,KAAKI,KAA5B;AAEA,WAAOJ,UAAU,GAAG,oBAAC,IAAD;AAAM,MAAA,GAAG,EAAEL;AAAX,MAAH,GAA8B,IAA/C;AACH;;AAEDU,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEF,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAkB,IAAxB;;AACA,UAAM;AACFE,MAAAA,OADE;AAEFL,MAAAA,QAFE;AAGFD,MAAAA,UAHE;AAIFO,MAAAA,IAJE;AAKF;AACAC,MAAAA,SANE;AAOFC,MAAAA;AAPE,QASFL,KATJ;AAAA,UAQOM,SARP,4BASIN,KATJ;;AAWA,UAAMO,SAAS,GAAGL,OAAO,CAACR,YAAY,CAAC,MAAD,EAASE,UAAT,EAAqBC,QAArB,CAAb,CAAzB;AACA,UAAM;AAAEW,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAyBN,IAA/B,CAdK,CAgBL;;AACA,UAAMO,WAAW,GAAGjB,sBAAsB,CAACgB,WAAD,CAA1C,CAjBK,CAmBL;AACA;AACA;AACA;AACA;;AACA,UAAME,UAAU,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBR,KAAlB,EAAyB;AACxC,2BAAqBK;AADmB,KAAzB,CAAnB;AAIA,WACI,oBAAC,aAAD;AAAe,MAAA,IAAI,EAAEF;AAArB,OACI,2CACQF,SADR;AAEI,MAAA,SAAS,EAAEC,SAFf;AAGI,MAAA,KAAK,EAAEI,UAHX;AAII,MAAA,KAAK,EAAEH;AAJX,QAMKT,IANL,CADJ,CADJ;AAYH;;AAlE0B;;gBAAzBD,M,eACiB;AACfI,EAAAA,OAAO,EAAEhB,KAAK,CAAC;AACX4B,IAAAA,IAAI,EAAE3B;AADK,GAAD,CADC;AAIfU,EAAAA,QAAQ,EAAEf,IAJK;AAKfc,EAAAA,UAAU,EAAEd,IALG;AAMfqB,EAAAA,IAAI,EAAEjB,KAAK,CAAC;AACRsB,IAAAA,KAAK,EAAErB,MAAM,CAAC4B,UADN;AAERN,IAAAA,WAAW,EAAExB,SAAS,CAAC,CAACF,MAAD,EAASI,MAAT,CAAD,CAAT,CAA4B4B;AAFjC,GAAD,CAAL,CAGHA,UATY;AAUfX,EAAAA,SAAS,EAAErB,MAVI;AAWfsB,EAAAA,KAAK,EAAErB;AAXQ,C;;gBADjBc,M,kBAeoB;AAClBD,EAAAA,QAAQ,EAAE,KADQ;AAElBD,EAAAA,UAAU,EAAE;AAFM,C;;AAsD1B,eAAeR,QAAQ,CAACI,cAAD,CAAR,CAAyBM,MAAzB,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { bool, number, object, oneOfType, shape, string } from 'prop-types';\n\nimport classify from 'src/classify';\nimport Icon from 'src/components/Icon';\nimport SwatchTooltip from './swatchTooltip';\nimport CheckIcon from 'react-feather/dist/icons/check';\n\nimport defaultClasses from './swatch.css';\n\nimport { memoizedGetRandomColor } from 'src/util/getRandomColor';\n\nconst getClassName = (name, isSelected, hasFocus) =>\n    `${name}${isSelected ? '_selected' : ''}${hasFocus ? '_focused' : ''}`;\n\nclass Swatch extends Component {\n    static propTypes = {\n        classes: shape({\n            root: string\n        }),\n        hasFocus: bool,\n        isSelected: bool,\n        item: shape({\n            label: string.isRequired,\n            value_index: oneOfType([number, string]).isRequired\n        }).isRequired,\n        itemIndex: number,\n        style: object\n    };\n\n    static defaultProps = {\n        hasFocus: false,\n        isSelected: false\n    };\n\n    get icon() {\n        const { isSelected } = this.props;\n\n        return isSelected ? <Icon src={CheckIcon} /> : null;\n    }\n\n    render() {\n        const { icon, props } = this;\n        const {\n            classes,\n            hasFocus,\n            isSelected,\n            item,\n            // eslint-disable-next-line\n            itemIndex,\n            style,\n            ...restProps\n        } = props;\n\n        const className = classes[getClassName('root', isSelected, hasFocus)];\n        const { label, value_index } = item;\n\n        // TODO: use the colors from graphQL when they become available.\n        const randomColor = memoizedGetRandomColor(value_index);\n\n        // We really want to avoid specifying presentation within JS.\n        // Swatches are unusual in that their color is data, not presentation,\n        // but applying color *is* presentational.\n        // So we merely provide the color data here, and let the CSS decide\n        // how to use that color (e.g., background, border).\n        const finalStyle = Object.assign({}, style, {\n            '--venia-swatch-bg': randomColor\n        });\n\n        return (\n            <SwatchTooltip text={label}>\n                <button\n                    {...restProps}\n                    className={className}\n                    style={finalStyle}\n                    title={label}\n                >\n                    {icon}\n                </button>\n            </SwatchTooltip>\n        );\n    }\n}\n\nexport default classify(defaultClasses)(Swatch);\n"],"file":"swatch.js"}