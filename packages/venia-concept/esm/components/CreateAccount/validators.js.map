{"version":3,"sources":["../../../src/components/CreateAccount/validators.js"],"names":["RestApi","request","Magento2","isPasswordComplexEnough","str","count","lower","upper","digit","special","char","test","Object","values","filter","Boolean","length","validators","Map","set","value","password","trimmed","trim","includes","asyncValidators","body","customerEmail","website_id","available","method","JSON","stringify","error"],"mappings":"AAAA,SAASA,OAAT,QAAwB,oBAAxB;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAcD,OAAO,CAACE,QAA5B;;AAEA,MAAMC,uBAAuB,GAAG,CAACC,GAAG,GAAG,EAAP,KAAc;AAC1C,QAAMC,KAAK,GAAG;AACVC,IAAAA,KAAK,EAAE,CADG;AAEVC,IAAAA,KAAK,EAAE,CAFG;AAGVC,IAAAA,KAAK,EAAE,CAHG;AAIVC,IAAAA,OAAO,EAAE;AAJC,GAAd;;AAOA,OAAK,MAAMC,IAAX,IAAmBN,GAAnB,EAAwB;AACpB,QAAI,QAAQO,IAAR,CAAaD,IAAb,CAAJ,EAAwBL,KAAK,CAACC,KAAN,GAAxB,KACK,IAAI,QAAQK,IAAR,CAAaD,IAAb,CAAJ,EAAwBL,KAAK,CAACE,KAAN,GAAxB,KACA,IAAI,KAAKI,IAAL,CAAUD,IAAV,CAAJ,EAAqBL,KAAK,CAACG,KAAN,GAArB,KACA,IAAI,KAAKG,IAAL,CAAUD,IAAV,CAAJ,EAAqBL,KAAK,CAACI,OAAN;AAC7B;;AAED,SAAOG,MAAM,CAACC,MAAP,CAAcR,KAAd,EAAqBS,MAArB,CAA4BC,OAA5B,EAAqCC,MAArC,IAA+C,CAAtD;AACH,CAhBD;;AAkBA,OAAO,MAAMC,UAAU,GAAG,IAAIC,GAAJ,GACrBC,GADqB,CACjB,SADiB,EACN,CAACC,KAAD,EAAQP,MAAR,KAAmB;AAC/B,SAAOO,KAAK,KAAKP,MAAM,CAACQ,QAAjB,GAA4B,uBAA5B,GAAsD,IAA7D;AACH,CAHqB,EAIrBF,GAJqB,CAIjB,OAJiB,EAIRC,KAAK,IAAI;AACnB,QAAME,OAAO,GAAG,CAACF,KAAK,IAAI,EAAV,EAAcG,IAAd,EAAhB;AAEA,MAAI,CAACD,OAAL,EAAc,OAAO,+BAAP;AACd,MAAI,CAACA,OAAO,CAACE,QAAR,CAAiB,GAAjB,CAAL,EAA4B,OAAO,oCAAP;AAE5B,SAAO,IAAP;AACH,CAXqB,EAYrBL,GAZqB,CAYjB,WAZiB,EAYJC,KAAK,IAAI;AACvB,SAAO,CAAC,CAACA,KAAK,IAAI,EAAV,EAAcG,IAAd,EAAD,GAAwB,2BAAxB,GAAsD,IAA7D;AACH,CAdqB,EAerBJ,GAfqB,CAejB,UAfiB,EAeLC,KAAK,IAAI;AACtB,SAAO,CAAC,CAACA,KAAK,IAAI,EAAV,EAAcG,IAAd,EAAD,GAAwB,0BAAxB,GAAqD,IAA5D;AACH,CAjBqB,EAkBrBJ,GAlBqB,CAkBjB,UAlBiB,EAkBLC,KAAK,IAAI;AACtB,MAAI,CAACA,KAAD,IAAUA,KAAK,CAACJ,MAAN,GAAe,CAA7B,EAAgC;AAC5B,WAAO,gDAAP;AACH;;AACD,MAAI,CAACb,uBAAuB,CAACiB,KAAD,CAA5B,EAAqC;AACjC,WAAO,wGAAP;AACH;;AAED,SAAO,IAAP;AACH,CA3BqB,CAAnB;AA6BP,OAAO,MAAMK,eAAe,GAAG,IAAIP,GAAJ,GAAUC,GAAV,CAAc,OAAd,EAAuB,MAAMC,KAAN,IAAe;AACjE,MAAI;AACA,UAAMM,IAAI,GAAG;AACTC,MAAAA,aAAa,EAAEP,KADN;AAETQ,MAAAA,UAAU,EAAE;AAFH,KAAb,CADA,CAMA;;AACA,UAAMC,SAAS,GAAG,MAAM5B,OAAO,CAAC,qCAAD,EAAwC;AACnE6B,MAAAA,MAAM,EAAE,MAD2D;AAEnEJ,MAAAA,IAAI,EAAEK,IAAI,CAACC,SAAL,CAAeN,IAAf;AAF6D,KAAxC,CAA/B;AAKA,WAAO,CAACG,SAAD,GAAa,sCAAb,GAAsD,IAA7D;AACH,GAbD,CAaE,OAAOI,KAAP,EAAc;AACZ,UAAM,wDAAN;AACH;AACJ,CAjB8B,CAAxB","sourcesContent":["import { RestApi } from '@magento/peregrine';\n\nconst { request } = RestApi.Magento2;\n\nconst isPasswordComplexEnough = (str = '') => {\n    const count = {\n        lower: 0,\n        upper: 0,\n        digit: 0,\n        special: 0\n    };\n\n    for (const char of str) {\n        if (/[a-z]/.test(char)) count.lower++;\n        else if (/[A-Z]/.test(char)) count.upper++;\n        else if (/\\d/.test(char)) count.digit++;\n        else if (/\\S/.test(char)) count.special++;\n    }\n\n    return Object.values(count).filter(Boolean).length >= 3;\n};\n\nexport const validators = new Map()\n    .set('confirm', (value, values) => {\n        return value !== values.password ? 'Passwords must match.' : null;\n    })\n    .set('email', value => {\n        const trimmed = (value || '').trim();\n\n        if (!trimmed) return 'An email address is required.';\n        if (!trimmed.includes('@')) return 'A valid email address is required.';\n\n        return null;\n    })\n    .set('firstName', value => {\n        return !(value || '').trim() ? 'A first name is required.' : null;\n    })\n    .set('lastName', value => {\n        return !(value || '').trim() ? 'A last name is required.' : null;\n    })\n    .set('password', value => {\n        if (!value || value.length < 8) {\n            return 'A password must contain at least 8 characters.';\n        }\n        if (!isPasswordComplexEnough(value)) {\n            return 'A password must contain at least 3 of the following: lowercase, uppercase, digits, special characters.';\n        }\n\n        return null;\n    });\n\nexport const asyncValidators = new Map().set('email', async value => {\n    try {\n        const body = {\n            customerEmail: value,\n            website_id: null\n        };\n\n        // response is a boolean\n        const available = await request('/rest/V1/customers/isEmailAvailable', {\n            method: 'POST',\n            body: JSON.stringify(body)\n        });\n\n        return !available ? 'This email address is not available.' : null;\n    } catch (error) {\n        throw 'An error occurred while looking up this email address.';\n    }\n});\n"],"file":"validators.js"}