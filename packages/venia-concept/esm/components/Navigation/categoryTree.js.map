{"version":3,"sources":["../../../src/components/Navigation/categoryTree.js"],"names":["React","Component","Fragment","func","number","objectOf","shape","string","Query","classify","loadingIndicator","Branch","Leaf","CategoryTree","defaultClasses","navigationMenu","Tree","leaves","classes","onNavigate","rootNodeId","updateRootNodeId","currentId","props","id","loading","error","data","branches","children","category","sort","a","b","position","map","node","include_in_menu","children_count","isLeaf","elementProps","nodeId","name","urlPath","url_path","path","push","element","branchClass","branch","inactive","render","root","tree","leaf","nodes","isRequired"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport { func, number, objectOf, shape, string } from 'prop-types';\n\nimport { Query } from 'src/drivers';\nimport classify from 'src/classify';\nimport { loadingIndicator } from 'src/components/LoadingIndicator';\nimport Branch from './categoryBranch';\nimport Leaf from './categoryLeaf';\nimport CategoryTree from './categoryTree';\nimport defaultClasses from './categoryTree.css';\nimport navigationMenu from '../../queries/getNavigationMenu.graphql';\n\nclass Tree extends Component {\n    static propTypes = {\n        classes: shape({\n            leaf: string,\n            root: string,\n            tree: string\n        }),\n        nodes: objectOf(\n            shape({\n                id: number.isRequired,\n                position: number.isRequired\n            })\n        ),\n        onNavigate: func,\n        rootNodeId: number.isRequired,\n        updateRootNodeId: func.isRequired,\n        currentId: number.isRequired\n    };\n\n    get leaves() {\n        const {\n            classes,\n            onNavigate,\n            rootNodeId,\n            updateRootNodeId,\n            currentId\n        } = this.props;\n\n        return rootNodeId ? (\n            <Query query={navigationMenu} variables={{ id: rootNodeId }}>\n                {({ loading, error, data }) => {\n                    if (error) return <div>Data Fetch Error</div>;\n                    if (loading) return loadingIndicator;\n\n                    const branches = [];\n\n                    const children = data.category.children.sort((a, b) => {\n                        if (a.position > b.position) return 1;\n                        else if (a.position == b.position && a.id > b.id)\n                            return 1;\n                        else return -1;\n                    });\n\n                    const leaves = children.map(node => {\n                        // allow leaf node to render if value is 1 or undefined (field not in Magento 2.3.0 schema)\n                        if (node.include_in_menu === 0) {\n                            return null;\n                        }\n                        const { children_count } = node;\n                        const isLeaf = children_count == 0;\n                        const elementProps = {\n                            nodeId: node.id,\n                            name: node.name,\n                            urlPath: node.url_path,\n                            path: node.path\n                        };\n\n                        if (!isLeaf) {\n                            branches.push(\n                                <CategoryTree\n                                    key={node.id}\n                                    rootNodeId={node.id}\n                                    updateRootNodeId={updateRootNodeId}\n                                    onNavigate={onNavigate}\n                                    currentId={currentId}\n                                />\n                            );\n                        }\n\n                        const element = isLeaf ? (\n                            <Leaf {...elementProps} onNavigate={onNavigate} />\n                        ) : (\n                            <Branch\n                                {...elementProps}\n                                onDive={updateRootNodeId}\n                            />\n                        );\n\n                        return <li key={node.id}>{element}</li>;\n                    });\n\n                    const branchClass =\n                        currentId == rootNodeId\n                            ? classes.branch\n                            : classes.inactive;\n\n                    return (\n                        <Fragment>\n                            <div className={branchClass}>{leaves}</div>\n                            {branches}\n                        </Fragment>\n                    );\n                }}\n            </Query>\n        ) : null;\n    }\n\n    render() {\n        const { leaves, props } = this;\n        const { classes } = props;\n\n        return (\n            <div className={classes.root}>\n                <ul className={classes.tree}>{leaves}</ul>\n            </div>\n        );\n    }\n}\n\nexport default classify(defaultClasses)(Tree);\n"],"file":"categoryTree.js"}