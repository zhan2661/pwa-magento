{"version":3,"sources":["../../../src/components/Notifications/notification.js"],"names":["React","Component","Icon","any","func","oneOf","shape","string","AlertCircle","InfoIcon","CheckCircle","classify","defaultClasses","defaultIcons","error","warning","success","Notification","setState","showing","e","state","runHandlerIfPresent","dismiss","name","args","handler","props","componentDidMount","_showingTimeout","setTimeout","SHOW_DELAY","componentWillUnmount","clearTimeout","render","classes","children","icon","CustomIcon","onClick","type","className","IconGlyph","handleTransitionEnd","handleClick","root","message","isRequired","afterDismiss","afterShow"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Icon from 'src/components/Icon';\nimport { any, func, oneOf, shape, string } from 'prop-types';\nimport AlertCircle from 'react-feather/dist/icons/alert-circle';\nimport InfoIcon from 'react-feather/dist/icons/info';\nimport CheckCircle from 'react-feather/dist/icons/check-circle';\n\nimport classify from 'src/classify';\nimport defaultClasses from './notification.css';\n\nconst defaultIcons = {\n    error: AlertCircle,\n    warning: InfoIcon,\n    success: CheckCircle\n};\n\nclass Notification extends Component {\n    static propTypes = {\n        children: any.isRequired,\n        classes: shape({\n            root: string\n        }),\n        icon: any,\n        afterDismiss: func,\n        afterShow: func,\n        onClick: func,\n        type: oneOf(['error', 'success', 'warning']).isRequired\n    };\n\n    static SHOW_DELAY = 50;\n\n    dismiss = () => this.setState({ showing: false });\n\n    handleTransitionEnd = e => {\n        // The transitionend event fires after slide down and slide up,\n        // so we test the showing state to determine which callback to run.\n        if (this.state.showing) {\n            // Pass a function to dismiss this notification into the caller.\n            this.runHandlerIfPresent('afterShow', e, this.dismiss);\n        } else {\n            this.runHandlerIfPresent('afterDismiss', e);\n        }\n    };\n\n    handleClick = e => {\n        // Pass a function to dismiss this notification into the caller.\n        this.runHandlerIfPresent('onClick', e, this.dismiss);\n    };\n\n    state = {\n        showing: false\n    };\n\n    runHandlerIfPresent(name, ...args) {\n        const handler = this.props[name];\n        if (typeof handler === 'function') {\n            handler(...args);\n        }\n    }\n\n    componentDidMount() {\n        // React sometimes optimizes by merging two successive DOM updates,\n        // which means we don't get the transition effect. Therefore we wait a\n        // moment after mount to add the class which causes the slide-down.\n        this._showingTimeout = setTimeout(\n            () => this.setState({ showing: true }),\n            Notification.SHOW_DELAY\n        );\n    }\n\n    componentWillUnmount() {\n        // Don't leak timeouts! React will complain if the above timeout tries\n        // to run setState on a component that isn't mounted anymore.\n        clearTimeout(this._showingTimeout);\n        this._showingTimeout = null;\n    }\n\n    render() {\n        const {\n            classes,\n            children,\n            icon: CustomIcon,\n            onClick,\n            type\n        } = this.props;\n        const { showing } = this.state;\n\n        let className = classes[type];\n        if (showing) {\n            className += ` ${classes.showing}`;\n        }\n\n        const IconGlyph = CustomIcon || defaultIcons[type];\n\n        return (\n            <button\n                className={className}\n                disabled={!onClick}\n                onTransitionEnd={this.handleTransitionEnd}\n                onClick={this.handleClick}\n            >\n                <Icon classes={{ root: classes.icon }} src={IconGlyph} />\n                <div className={classes.message}>{children}</div>\n            </button>\n        );\n    }\n}\n\nexport default classify(defaultClasses)(Notification);\n"],"file":"notification.js"}