{"version":3,"sources":["../../src/Price/Price.js"],"names":["React","PureComponent","Fragment","number","string","shape","patches","Price","render","value","currencyCode","classes","props","parts","toParts","call","Intl","NumberFormat","undefined","style","currency","children","map","part","i","partClass","type","key","isRequired","integer","decimal","fraction"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,QAA+C,OAA/C;AACA,SAASC,MAAT,EAAiBC,MAAjB,EAAyBC,KAAzB,QAAsC,YAAtC;AACA,OAAOC,OAAP;AAEA;;;;;;;;;;;AAUA,eAAe,MAAMC,KAAN,SAAoBN,aAApB,CAAkC;AAyB7CO,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA,YAAT;AAAuBC,MAAAA;AAAvB,QAAmC,KAAKC,KAA9C;AAEA,UAAMC,KAAK,GAAGP,OAAO,CAACQ,OAAR,CAAgBC,IAAhB,CACVC,IAAI,CAACC,YAAL,CAAkBC,SAAlB,EAA6B;AACzBC,MAAAA,KAAK,EAAE,UADkB;AAEzBC,MAAAA,QAAQ,EAAEV;AAFe,KAA7B,CADU,EAKVD,KALU,CAAd;AAQA,UAAMY,QAAQ,GAAGR,KAAK,CAACS,GAAN,CAAU,CAACC,IAAD,EAAOC,CAAP,KAAa;AACpC,YAAMC,SAAS,GAAGd,OAAO,CAACY,IAAI,CAACG,IAAN,CAAzB;AACA,YAAMC,GAAG,GAAI,GAAEH,CAAE,IAAGD,IAAI,CAACd,KAAM,EAA/B;AAEA,aACI;AAAM,QAAA,GAAG,EAAEkB,GAAX;AAAgB,QAAA,SAAS,EAAEF;AAA3B,SACKF,IAAI,CAACd,KADV,CADJ;AAKH,KATgB,CAAjB;AAWA,WAAO,oBAAC,QAAD,QAAWY,QAAX,CAAP;AACH;;AAhD4C;;gBAA5Bd,K,eACE;AACf;;;AAGAE,EAAAA,KAAK,EAAEN,MAAM,CAACyB,UAJC;;AAKf;;;AAGAlB,EAAAA,YAAY,EAAEN,MAAM,CAACwB,UARN;;AASf;;;AAGAjB,EAAAA,OAAO,EAAEN,KAAK,CAAC;AACXe,IAAAA,QAAQ,EAAEhB,MADC;AAEXyB,IAAAA,OAAO,EAAEzB,MAFE;AAGX0B,IAAAA,OAAO,EAAE1B,MAHE;AAIX2B,IAAAA,QAAQ,EAAE3B;AAJC,GAAD;AAZC,C;;gBADFG,K,kBAqBK;AAClBI,EAAAA,OAAO,EAAE;AADS,C","sourcesContent":["import React, { PureComponent, Fragment } from 'react';\nimport { number, string, shape } from 'prop-types';\nimport patches from '../util/intlPatches';\n\n/**\n * The **Price** component is used anywhere a price needs to be displayed.\n *\n * Formatting of prices and currency symbol selection is handled entirely by the ECMAScript Internationalization API available in modern browsers.\n *\n * A [polyfill][] is required for any JavaScript runtime that does not have [Intl.NumberFormat.prototype.formatToParts][].\n *\n * [polyfill]: https://www.npmjs.com/package/intl\n * [Intl.NumberFormat.prototype.formatToParts]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/formatToParts\n */\nexport default class Price extends PureComponent {\n    static propTypes = {\n        /**\n         * The numeric price\n         */\n        value: number.isRequired,\n        /**\n         * A string with any of the currency code supported by Intl.NumberFormat\n         */\n        currencyCode: string.isRequired,\n        /**\n         * Class names to use when styling this component\n         */\n        classes: shape({\n            currency: string,\n            integer: string,\n            decimal: string,\n            fraction: string\n        })\n    };\n\n    static defaultProps = {\n        classes: {}\n    };\n\n    render() {\n        const { value, currencyCode, classes } = this.props;\n\n        const parts = patches.toParts.call(\n            Intl.NumberFormat(undefined, {\n                style: 'currency',\n                currency: currencyCode\n            }),\n            value\n        );\n\n        const children = parts.map((part, i) => {\n            const partClass = classes[part.type];\n            const key = `${i}-${part.value}`;\n\n            return (\n                <span key={key} className={partClass}>\n                    {part.value}\n                </span>\n            );\n        });\n\n        return <Fragment>{children}</Fragment>;\n    }\n}\n"],"file":"Price.js"}