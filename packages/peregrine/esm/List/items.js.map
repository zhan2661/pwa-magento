{"version":3,"sources":["../../src/List/items.js"],"names":["React","Component","Fragment","PropTypes","memoize","iterable","ListItem","removeFocus","hasFocus","updateCursor","index","cursor","updateSelection","key","prevState","props","selectionModel","selection","Set","add","has","delete","Items","setState","syncSelection","render","getItemKey","items","renderItem","state","children","Array","from","item","handleBlur","getClickHandler","getFocusHandler","onSelectionChange","func","isRequired","oneOfType","string","oneOf","id"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\n\nimport memoize from '../util/unaryMemoize';\nimport iterable from '../validators/iterable';\nimport ListItem from './item';\n\nconst removeFocus = () => ({\n    hasFocus: false\n});\n\nconst updateCursor = memoize(index => () => ({\n    cursor: index,\n    hasFocus: true\n}));\n\nconst updateSelection = memoize(key => (prevState, props) => {\n    const { selectionModel } = props;\n    let selection;\n\n    if (selectionModel === 'radio') {\n        selection = new Set().add(key);\n    }\n\n    if (selectionModel === 'checkbox') {\n        selection = new Set(prevState.selection);\n\n        if (selection.has(key)) {\n            selection.delete(key);\n        } else {\n            selection.add(key);\n        }\n    }\n\n    return { selection };\n});\n\nclass Items extends Component {\n    static propTypes = {\n        getItemKey: PropTypes.func.isRequired,\n        items: iterable.isRequired,\n        renderItem: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n        selectionModel: PropTypes.oneOf(['checkbox', 'radio'])\n    };\n\n    static defaultProps = {\n        getItemKey: ({ id }) => id,\n        selectionModel: 'radio'\n    };\n\n    state = {\n        cursor: null,\n        hasFocus: false,\n        selection: new Set()\n    };\n\n    render() {\n        const { getItemKey, items, renderItem } = this.props;\n        const { cursor, hasFocus, selection } = this.state;\n\n        const children = Array.from(items, (item, index) => {\n            const key = getItemKey(item, index);\n\n            return (\n                <ListItem\n                    key={key}\n                    item={item}\n                    itemIndex={index}\n                    render={renderItem}\n                    hasFocus={hasFocus && cursor === index}\n                    isSelected={selection.has(key)}\n                    onBlur={this.handleBlur}\n                    onClick={this.getClickHandler(key)}\n                    onFocus={this.getFocusHandler(index)}\n                />\n            );\n        });\n\n        return <Fragment>{children}</Fragment>;\n    }\n\n    syncSelection() {\n        const { selection } = this.state;\n        const { onSelectionChange } = this.props;\n\n        if (onSelectionChange) {\n            onSelectionChange(selection);\n        }\n    }\n\n    handleBlur = () => {\n        this.setState(removeFocus);\n    };\n\n    getClickHandler = memoize(key => () => {\n        this.setState(updateSelection(key), this.syncSelection);\n    });\n\n    getFocusHandler = memoize(index => () => {\n        this.setState(updateCursor(index));\n    });\n}\n\nexport default Items;\n"],"file":"items.js"}