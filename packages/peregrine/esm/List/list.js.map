{"version":3,"sources":["../../src/List/list.js"],"names":["React","Component","PropTypes","fromRenderProp","iterable","Items","List","selection","onSelectionChange","props","render","classes","getItemKey","items","renderItem","selectionModel","restProps","customProps","Root","Object","keys","root","handleSelectionChange","shape","string","func","isRequired","oneOfType","oneOf","id"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,OAAOC,cAAP;AACA,OAAOC,QAAP;AACA,OAAOC,KAAP;AAEA;;;;;AAIA,MAAMC,IAAN,SAAmBL,SAAnB,CAA6B;AAAA;AAAA;;AAAA,mDA4EDM,SAAS,IAAI;AACjC,YAAM;AAAEC,QAAAA;AAAF,UAAwB,KAAKC,KAAnC;;AAEA,UAAID,iBAAJ,EAAuB;AACnBA,QAAAA,iBAAiB,CAACD,SAAD,CAAjB;AACH;AACJ,KAlFwB;AAAA;;AAyCzBG,EAAAA,MAAM,GAAG;AACL,wBASI,KAAKD,KATT;AAAA,UAAM;AACFE,MAAAA,OADE;AAEFC,MAAAA,UAFE;AAGFC,MAAAA,KAHE;AAIFH,MAAAA,MAJE;AAKFI,MAAAA,UALE;AAMFN,MAAAA,iBANE;AAOFO,MAAAA;AAPE,KAAN;AAAA,UAQOC,SARP;;AAWA,UAAMC,WAAW,GAAG;AAChBN,MAAAA,OADgB;AAEhBC,MAAAA,UAFgB;AAGhBC,MAAAA,KAHgB;AAIhBL,MAAAA,iBAJgB;AAKhBO,MAAAA;AALgB,KAApB;AAQA,UAAMG,IAAI,GAAGf,cAAc,CAACO,MAAD,EAASS,MAAM,CAACC,IAAP,CAAYH,WAAZ,CAAT,CAA3B;AAEA,WACI,oBAAC,IAAD;AAAM,MAAA,SAAS,EAAEN,OAAO,CAACU;AAAzB,OAAmCJ,WAAnC,EAAoDD,SAApD,GACI,oBAAC,KAAD;AACI,MAAA,KAAK,EAAEH,KADX;AAEI,MAAA,UAAU,EAAED,UAFhB;AAGI,MAAA,UAAU,EAAEE,UAHhB;AAII,MAAA,cAAc,EAAEC,cAJpB;AAKI,MAAA,iBAAiB,EAAE,KAAKO;AAL5B,MADJ,CADJ;AAWH;;AA1EwB;;gBAAvBhB,I,eACiB;AACf;;;AAGAK,EAAAA,OAAO,EAAET,SAAS,CAACqB,KAAV,CAAgB;AACrBF,IAAAA,IAAI,EAAEnB,SAAS,CAACsB;AADK,GAAhB,CAJM;AAOfZ,EAAAA,UAAU,EAAEV,SAAS,CAACuB,IAAV,CAAeC,UAPZ;;AAQf;;;AAGAb,EAAAA,KAAK,EAAET,QAAQ,CAACsB,UAXD;;AAYf;;;AAGAhB,EAAAA,MAAM,EAAER,SAAS,CAACyB,SAAV,CAAoB,CAACzB,SAAS,CAACuB,IAAX,EAAiBvB,SAAS,CAACsB,MAA3B,CAApB,EACHE,UAhBU;;AAiBf;;;AAGAZ,EAAAA,UAAU,EAAEZ,SAAS,CAACyB,SAAV,CAAoB,CAACzB,SAAS,CAACuB,IAAX,EAAiBvB,SAAS,CAACsB,MAA3B,CAApB,CApBG;;AAqBf;;;AAGAhB,EAAAA,iBAAiB,EAAEN,SAAS,CAACuB,IAxBd;;AAyBf;;;AAGAV,EAAAA,cAAc,EAAEb,SAAS,CAAC0B,KAAV,CAAgB,CAAC,UAAD,EAAa,OAAb,CAAhB;AA5BD,C;;gBADjBtB,I,kBAgCoB;AAClBK,EAAAA,OAAO,EAAE,EADS;AAElBC,EAAAA,UAAU,EAAE,CAAC;AAAEiB,IAAAA;AAAF,GAAD,KAAYA,EAFN;AAGlBhB,EAAAA,KAAK,EAAE,EAHW;AAIlBH,EAAAA,MAAM,EAAE,KAJU;AAKlBI,EAAAA,UAAU,EAAE,KALM;AAMlBC,EAAAA,cAAc,EAAE;AANE,C;;AAqD1B,eAAeT,IAAf","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport fromRenderProp from '../util/fromRenderProp';\nimport iterable from '../validators/iterable';\nimport Items from './items';\n\n/**\n * The **List** component maps a collection of data objects into an array of elements.\n * It also manages the selection and focus of those elements.\n */\nclass List extends Component {\n    static propTypes = {\n        /**\n         * Class names to use when styling this component\n         */\n        classes: PropTypes.shape({\n            root: PropTypes.string\n        }),\n        getItemKey: PropTypes.func.isRequired,\n        /**\n         * An iterable that yields `[key, item]` pairs such as an ES2015 Map\n         */\n        items: iterable.isRequired,\n        /**\n         * A render prop for the list element. A tagname string, such as `\"div\"`, is also valid.\n         */\n        render: PropTypes.oneOfType([PropTypes.func, PropTypes.string])\n            .isRequired,\n        /**\n         * A render prop for the list item elements. A tagname string, such as `\"div\"`, is also valid.\n         */\n        renderItem: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n        /**\n         * A callback that fires when the selection state changes.\n         */\n        onSelectionChange: PropTypes.func,\n        /**\n         * A string corresponding to a selection model.\n         */\n        selectionModel: PropTypes.oneOf(['checkbox', 'radio'])\n    };\n\n    static defaultProps = {\n        classes: {},\n        getItemKey: ({ id }) => id,\n        items: [],\n        render: 'div',\n        renderItem: 'div',\n        selectionModel: 'radio'\n    };\n\n    render() {\n        const {\n            classes,\n            getItemKey,\n            items,\n            render,\n            renderItem,\n            onSelectionChange,\n            selectionModel,\n            ...restProps\n        } = this.props;\n\n        const customProps = {\n            classes,\n            getItemKey,\n            items,\n            onSelectionChange,\n            selectionModel\n        };\n\n        const Root = fromRenderProp(render, Object.keys(customProps));\n\n        return (\n            <Root className={classes.root} {...customProps} {...restProps}>\n                <Items\n                    items={items}\n                    getItemKey={getItemKey}\n                    renderItem={renderItem}\n                    selectionModel={selectionModel}\n                    onSelectionChange={this.handleSelectionChange}\n                />\n            </Root>\n        );\n    }\n\n    handleSelectionChange = selection => {\n        const { onSelectionChange } = this.props;\n\n        if (onSelectionChange) {\n            onSelectionChange(selection);\n        }\n    };\n}\n\nexport default List;\n"],"file":"list.js"}