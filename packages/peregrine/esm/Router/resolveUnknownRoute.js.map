{"version":3,"sources":["../../src/Router/resolveUnknownRoute.js"],"names":["numRE","castDigitsToNum","str","test","Number","resolveUnknownRoute","opts","route","apiBase","preloadDone","preloadAttrs","document","body","dataset","modelType","type","id","modelId","preloadScript","getElementById","preload","JSON","parse","textContent","e","process","env","NODE_ENV","console","error","preloaded","remotelyResolveRoute","urlResolve","localStorage","getItem","navigator","onLine","Promise","resolve","data","urlResolver","fetchRoute","url","URL","fetch","method","credentials","headers","Headers","stringify","query","trim","then","res","json","storeURLResolveResult","storedRoute","item","setItem"],"mappings":"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","sourcesContent":["/**\n * @description Given a route string, resolves with the \"standard route\", along\n * with the assigned Root Component (and its owning chunk) from the backend\n * @param {{ route: string, apiBase: string, __tmp_webpack_public_path__: string}} opts\n */\n\n// Some M2.3.0 GraphQL node IDs are numbers and some are strings, so explicitly\n// cast numbers if they appear to be numbers\nconst numRE = /^\\d+$/;\nconst castDigitsToNum = str =>\n    typeof str === 'string' && numRE.test(str) ? Number(str) : str;\nexport default async function resolveUnknownRoute(opts) {\n    const { route, apiBase } = opts;\n\n    if (!resolveUnknownRoute.preloadDone) {\n        resolveUnknownRoute.preloadDone = true;\n\n        // Templates may use the new style (data attributes on the body tag),\n        // or the old style (handwritten JSON in a script element).\n\n        // New style:\n        const preloadAttrs = document.body.dataset;\n        if (preloadAttrs && preloadAttrs.modelType) {\n            return {\n                type: preloadAttrs.modelType,\n                id: castDigitsToNum(preloadAttrs.modelId)\n            };\n        }\n\n        // Old style:\n        const preloadScript = document.getElementById('url-resolver');\n        if (preloadScript) {\n            try {\n                const preload = JSON.parse(preloadScript.textContent);\n                return {\n                    type: preload.type,\n                    id: castDigitsToNum(preload.id)\n                };\n            } catch (e) {\n                // istanbul ignore next: will never happen in test\n                if (process.env.NODE_ENV === 'development') {\n                    console.error(\n                        'Unable to read preload!',\n                        preloaded.textContent,\n                        e\n                    );\n                }\n            }\n        }\n    }\n\n    return remotelyResolveRoute({\n        route,\n        apiBase\n    });\n}\n\n/**\n * @description Checks if route is stored in localStorage, if not call `fetchRoute`\n * @param {{ route: string, apiBase: string}} opts\n * @returns {Promise<{type: \"PRODUCT\" | \"CATEGORY\" | \"CMS_PAGE\"}>}\n */\nfunction remotelyResolveRoute(opts) {\n    let urlResolve = localStorage.getItem('urlResolve');\n    urlResolve = JSON.parse(urlResolve);\n\n    // If it exists in localStorage, use that value\n    // TODO: This can be handled by workbox once this issue is resolved in the\n    // graphql repo: https://github.com/magento/graphql-ce/issues/229\n    if ((urlResolve && urlResolve[opts.route]) || !navigator.onLine) {\n        if (urlResolve && urlResolve[opts.route]) {\n            return Promise.resolve(urlResolve[opts.route].data.urlResolver);\n        } else {\n            return Promise.resolve({\n                type: 'NOTFOUND',\n                id: -1\n            });\n        }\n    } else {\n        return fetchRoute(opts);\n    }\n}\n\n/**\n * @description Calls the GraphQL API for results from the urlResolver query\n * @param {{ route: string, apiBase: string}} opts\n * @returns {Promise<{type: \"PRODUCT\" | \"CATEGORY\" | \"CMS_PAGE\"}>}\n */\nfunction fetchRoute(opts) {\n    const url = new URL('/graphql', opts.apiBase);\n    return fetch(url, {\n        method: 'POST',\n        credentials: 'include',\n        headers: new Headers({\n            'Content-Type': 'application/json'\n        }),\n        body: JSON.stringify({\n            query: `\n                {\n                    urlResolver(url: \"${opts.route}\") {\n                        type\n                        id\n                    }\n                }\n            `.trim()\n        })\n    })\n        .then(res => res.json())\n        .then(res => {\n            storeURLResolveResult(res, opts);\n            return res.data.urlResolver;\n        });\n}\n\n// TODO: This can be handled by workbox once this issue is resolved in the\n// graphql repo: https://github.com/magento/graphql-ce/issues/229\nfunction storeURLResolveResult(res, opts) {\n    const storedRoute = localStorage.getItem('urlResolve');\n    const item = JSON.parse(storedRoute) || {};\n\n    item[opts.route] = res;\n    localStorage.setItem('urlResolve', JSON.stringify(item));\n}\n"],"file":"resolveUnknownRoute.js"}