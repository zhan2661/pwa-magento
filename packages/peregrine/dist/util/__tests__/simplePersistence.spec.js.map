{"version":3,"sources":["../../../src/util/__tests__/simplePersistence.spec.js"],"names":["BrowserPersistence","NAME","KEY","MOCK_VALUE","unit","previousLocalStorage","window","localStorage","mockGetItem","jest","fn","mockRemoveItem","mockSetItem","localStorageMock","getItem","removeItem","setItem","instance","shape","value","timeStored","ttl","JSON","stringify","beforeAll","Object","defineProperty","afterAll","describe","test","mockImplementationOnce","result","expect","toEqual","toBeUndefined","toHaveBeenCalledWith","MOCK_TTL","toHaveBeenCalled","storageKey","mock","calls","storageItem","parsedItem","parse","parsedValue","toBeTruthy","toBeCalledWith"],"mappings":"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","sourcesContent":["import BrowserPersistence from '../simplePersistence';\n\nconst NAME = 'UnitTest';\nconst KEY = `M2_VENIA_BROWSER_PERSISTENCE__${NAME}`;\nconst MOCK_VALUE = { unit: 'test' };\n\nconst previousLocalStorage = window.localStorage;\nconst mockGetItem = jest.fn();\nconst mockRemoveItem = jest.fn();\nconst mockSetItem = jest.fn();\nconst localStorageMock = {\n    getItem: mockGetItem,\n    removeItem: mockRemoveItem,\n    setItem: mockSetItem\n};\n\nlet instance;\n\n/**\n * The BrowserPersistence class enforces a particular shape for\n * the items it writes to storage.\n *\n * This helper function shapes an object to conform to the same structure.\n *\n * @param {object} with properties:\n *   @param {object} value - The value to write to storage.\n *   @param {Number} timeStored - The time at which this value was stored.\n *   @param {Number} ttl - The number of seconds that this item should live in storage.\n */\nconst shape = ({ value, timeStored, ttl }) => {\n    return JSON.stringify({\n        value: JSON.stringify(value),\n        timeStored,\n        ttl\n    });\n};\n\nbeforeAll(() => {\n    // Mock window.localStorage so we can control it.\n    Object.defineProperty(window, 'localStorage', {\n        value: localStorageMock\n    });\n\n    instance = new BrowserPersistence();\n});\n\nafterAll(() => {\n    // Set window.localStorage back to what it was.\n    Object.defineProperty(window, 'localStorage', {\n        value: previousLocalStorage\n    });\n});\n\ndescribe('getItem', () => {\n    test('it returns the item if found', () => {\n        // Test Setup: make sure it finds something.\n        mockGetItem.mockImplementationOnce(() =>\n            shape({\n                value: MOCK_VALUE\n            })\n        );\n\n        // Call the function.\n        const result = instance.getItem(NAME);\n\n        // Make assertions.\n        expect(result).toEqual(MOCK_VALUE);\n    });\n\n    test('it returns undefined if not found', () => {\n        // Call the function.\n        const result = instance.getItem(NAME);\n\n        // Make assertions.\n        expect(result).toBeUndefined();\n    });\n\n    test('it removes the item and returns undefined if the item has expired', () => {\n        // Test setup: an expired item.\n        mockGetItem.mockImplementationOnce(() =>\n            shape({\n                value: MOCK_VALUE,\n                timeStored: 0,\n                ttl: 1\n            })\n        );\n\n        // Call the function.\n        const result = instance.getItem(NAME);\n\n        // Make assertions.\n        expect(mockRemoveItem).toHaveBeenCalledWith(KEY);\n        expect(result).toBeUndefined();\n    });\n});\n\ndescribe('setItem', () => {\n    test('it puts the item in storage with the correct values', () => {\n        // Call the function.\n        const MOCK_TTL = 5;\n        instance.setItem(NAME, MOCK_VALUE, MOCK_TTL);\n\n        // Make assertions.\n        expect(mockSetItem).toHaveBeenCalled();\n\n        const storageKey = mockSetItem.mock.calls[0][0];\n        expect(storageKey).toEqual(KEY);\n\n        const storageItem = mockSetItem.mock.calls[0][1];\n        const parsedItem = JSON.parse(storageItem);\n        const parsedValue = JSON.parse(parsedItem.value);\n        expect(parsedItem.timeStored).toBeTruthy();\n        expect(parsedItem.ttl).toEqual(MOCK_TTL);\n        expect(parsedValue).toEqual(MOCK_VALUE);\n    });\n});\n\ndescribe('removeItem', () => {\n    test('it returns undefined', () => {\n        // Call the function.\n        const result = instance.removeItem(NAME);\n\n        // Make assertions.\n        expect(result).toBeUndefined();\n    });\n\n    test('it removes the item from storage', () => {\n        // Call the function.\n        instance.removeItem(NAME);\n\n        // Make assertions.\n        expect(mockRemoveItem).toBeCalledWith(KEY);\n    });\n});\n"],"file":"simplePersistence.spec.js"}