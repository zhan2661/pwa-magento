{"version":3,"sources":["../../../../src/RestApi/Magento2/__tests__/M2ApiRequest.spec.js"],"names":["M2ApiRequest","request","mockFetch","jest","fn","responseJson","req","getResponse","then","res","json","prototype","_transport","mockFetchReturned","status","statusText","text","delay","mockImplementationOnce","_","signal","Promise","resolve","reject","body","JSON","stringify","timeout","setTimeout","Response","onabort","clearTimeout","e","Error","name","mockFetchRejected","afterEach","mockReset","test","some","run","expect","toHaveBeenCalledTimes","toHaveBeenCalledWith","objectContaining","headers","any","Headers","credentials","AbortSignal","resolves","toEqual","error","message","stack","rejects","toThrowError","toThrowErrorMatchingSnapshot","toThrow","method","abortRequest","useFakeTimers","uniqueId","Math","random","toString","subsequentReq","runAllTimers","result","useRealTimers","advanceTimersByTime","multicast","subsequentReqResolved","toBe","shouldBeOverridden","shouldOverride","rolls","cache","toHaveProperty","Date","toISOString","Accept","parseJSON","response","toBeInstanceOf"],"mappings":"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","sourcesContent":["import M2ApiRequest, { request } from '../M2ApiRequest';\n\nconst mockFetch = jest.fn();\nconst responseJson = req => req.getResponse().then(res => res.json());\nM2ApiRequest.prototype._transport = mockFetch;\n\nfunction mockFetchReturned({\n    status = 200,\n    statusText = 'OK',\n    text,\n    json,\n    delay = 0\n}) {\n    mockFetch.mockImplementationOnce(\n        (_, { signal }) =>\n            new Promise((resolve, reject) => {\n                let body = json\n                    ? JSON.stringify(typeof json === 'function' ? json() : json)\n                    : typeof text === 'function'\n                    ? text()\n                    : text;\n                const timeout = setTimeout(\n                    () =>\n                        resolve(\n                            new Response(body, {\n                                status,\n                                statusText\n                            })\n                        ),\n                    delay\n                );\n                signal.onabort = () => {\n                    clearTimeout(timeout);\n                    const e = new Error('Aborted');\n                    e.name = 'AbortError';\n                    reject(e);\n                };\n            })\n    );\n}\nfunction mockFetchRejected(e, { delay = 0 } = {}) {\n    mockFetch.mockImplementationOnce(\n        () => new Promise((_, reject) => setTimeout(() => reject(e), delay))\n    );\n}\n\nafterEach(() => {\n    mockFetch.mockReset();\n});\n\ntest('runs fetch and returns a promise for response object', async () => {\n    mockFetchReturned({\n        json: {\n            some: 'data'\n        }\n    });\n    const req = new M2ApiRequest('fake-path');\n    req.run();\n    expect(mockFetch).toHaveBeenCalledTimes(1);\n    expect(mockFetch).toHaveBeenCalledWith(\n        'fake-path',\n        expect.objectContaining({\n            headers: expect.any(Headers),\n            credentials: 'include',\n            signal: expect.any(AbortSignal)\n        })\n    );\n    await expect(responseJson(req)).resolves.toEqual({\n        some: 'data'\n    });\n});\n\ntest('returns a rejected promise when http response is not 2xx', async () => {\n    mockFetchReturned({\n        status: 500,\n        statusText: 'Server Yuck',\n        text: JSON.stringify({\n            error: {\n                message: 'That sucked',\n                stack: 'php\\nstack\\ntrace'\n            }\n        })\n    });\n    const req = new M2ApiRequest('fake-path');\n    req.run();\n    await expect(req.getResponse()).rejects.toThrowError(\n        'GET fake-path responded 500 Server Yuck'\n    );\n});\n\ntest('throws an error if .run() has not been called', () => {\n    const req = new M2ApiRequest('somewhere');\n    expect(() => req.getResponse()).toThrowErrorMatchingSnapshot();\n});\n\ntest('throws an error if underlying transport throws an error', async () => {\n    mockFetchRejected(new Error('Something weird happened'));\n    const req = new M2ApiRequest('somewhere');\n    req.run();\n    await expect(req.getResponse()).rejects.toThrow('Something weird happened');\n});\n\ntest('can be aborted', async () => {\n    mockFetchReturned({\n        json: 'never gets to you',\n        delay: 500\n    });\n    const req = new M2ApiRequest('somewhere', {\n        method: 'POST',\n        body: 'something'\n    });\n    req.run();\n    req.abortRequest();\n    await expect(req.getResponse()).rejects.toThrowErrorMatchingSnapshot();\n});\n\ntest('multicasts a request that appears safe and idempotent', async () => {\n    jest.useFakeTimers();\n    const uniqueId = Math.random().toString(16);\n    mockFetchReturned({\n        json: uniqueId,\n        delay: 1000\n    });\n    const req = new M2ApiRequest('some-empty-post', {\n        method: 'POST'\n    });\n    req.run();\n    const subsequentReq = new M2ApiRequest('some-empty-post', {\n        method: 'POST'\n    });\n    subsequentReq.run();\n    jest.runAllTimers();\n    expect(mockFetch).toHaveBeenCalledTimes(1);\n    const result = await responseJson(req);\n    expect(result).toEqual(uniqueId);\n    expect(result).toEqual(await responseJson(subsequentReq));\n    jest.useRealTimers();\n});\n\ntest('does not multicast a settled request', async () => {\n    jest.useFakeTimers();\n    mockFetchReturned({\n        json: 'response1',\n        delay: 100\n    });\n    mockFetchReturned({\n        json: 'response2',\n        delay: 1000\n    });\n    const req = new M2ApiRequest('some-cacheable-operation');\n    req.run();\n    jest.advanceTimersByTime(500);\n    expect(await responseJson(req)).toEqual('response1');\n    const subsequentReq = new M2ApiRequest('some-cacheable-operation');\n    subsequentReq.run();\n    expect(mockFetch).toHaveBeenCalledTimes(2);\n    jest.runAllTimers();\n    expect(await responseJson(subsequentReq)).toEqual('response2');\n    jest.useRealTimers();\n});\n\ntest('does not multicast a request that is clearly not idempotent/safe', async () => {\n    jest.useFakeTimers();\n    mockFetchReturned({\n        json: 'response1',\n        delay: 1000\n    });\n    mockFetchReturned({\n        json: 'response2',\n        delay: 200\n    });\n    const req = new M2ApiRequest('some-create-operation', {\n        method: 'POST',\n        body: 'do stuff'\n    });\n    req.run();\n    const subsequentReq = new M2ApiRequest('some-create-operation', {\n        method: 'POST',\n        body: 'do stuff'\n    });\n    subsequentReq.run();\n    expect(mockFetch).toHaveBeenCalledTimes(2);\n    jest.advanceTimersByTime(500);\n    expect(await responseJson(subsequentReq)).toEqual('response2');\n    jest.runAllTimers();\n    expect(await responseJson(req)).toEqual('response1');\n    jest.useRealTimers();\n});\n\ntest('multicasts an unsafe request if `multicast` option is true', async () => {\n    jest.useFakeTimers();\n    mockFetchReturned({\n        json: 'response1',\n        delay: 1000\n    });\n    mockFetchReturned({\n        json: 'response2',\n        delay: 200\n    });\n    const req = new M2ApiRequest('some-create-operation', {\n        method: 'POST',\n        body: 'do stuff',\n        multicast: true\n    });\n    req.run();\n    const subsequentReq = new M2ApiRequest('some-create-operation', {\n        method: 'POST',\n        body: 'do stuff',\n        multicast: true\n    });\n    subsequentReq.run();\n    expect(mockFetch).toHaveBeenCalledTimes(1);\n    // observe that the second mock was set to resolve faster, but multicast\n    // reuses the first mock\n    let subsequentReqResolved = false;\n    subsequentReq.getResponse().then(() => {\n        subsequentReqResolved = true;\n    });\n    jest.advanceTimersByTime(500);\n    expect(subsequentReqResolved).toBe(false);\n    jest.runAllTimers();\n    expect(await responseJson(req)).toEqual('response1');\n    expect(await responseJson(subsequentReq)).toEqual('response1');\n    expect(subsequentReqResolved).toBe(true);\n    jest.useRealTimers();\n});\n\ntest('does not multicast a safe request if `multicast` option is false', async () => {\n    mockFetchReturned({\n        json: 'updated1'\n    });\n    mockFetchReturned({\n        json: 'updated2'\n    });\n    const req = new M2ApiRequest('resource-to-update', {\n        method: 'PUT',\n        body: 'new value',\n        multicast: false\n    });\n    req.run();\n    const subsequentReq = new M2ApiRequest('resource-to-update', {\n        method: 'PUT',\n        body: 'new value',\n        multicast: false\n    });\n    subsequentReq.run();\n    expect(mockFetch).toHaveBeenCalledTimes(2);\n    expect(await responseJson(req)).toEqual('updated1');\n    expect(await responseJson(subsequentReq)).toEqual('updated2');\n});\n\ntest('if cache is set to reload or no-store, aborts and replaces a matching multicast', async () => {\n    mockFetchReturned({\n        json: {\n            shouldBeOverridden: true\n        },\n        delay: 50\n    });\n    mockFetchReturned({\n        json: {\n            shouldOverride: true\n        },\n        delay: 100\n    });\n    const req = new M2ApiRequest('slow-resource');\n    req.run();\n    const rolls = new M2ApiRequest('slow-resource', {\n        cache: 'no-store'\n    });\n    rolls.run();\n    await expect(responseJson(rolls)).resolves.toHaveProperty('shouldOverride');\n    await expect(responseJson(req)).resolves.toHaveProperty('shouldOverride');\n});\n\ntest('multicasts can be manually aborted', async () => {\n    mockFetchReturned({\n        json: 'never gets to you',\n        delay: 500\n    });\n    const req = new M2ApiRequest('somewhere');\n    req.run();\n    req.abortRequest();\n    await expect(responseJson(req)).rejects.toThrowErrorMatchingSnapshot();\n});\n\ntest('headers can be updated with object literal', async () => {\n    mockFetchReturned({\n        json: {\n            some: 'otherdata'\n        }\n    });\n    await expect(\n        request('somewhere', {\n            cache: 'reload',\n            headers: {\n                'If-Modified-Since': new Date().toISOString()\n            }\n        })\n    ).resolves.toEqual({\n        some: 'otherdata'\n    });\n});\n\ntest('headers can be updated with Header instance', async () => {\n    mockFetchReturned({\n        json: {\n            some: 'otherdata'\n        }\n    });\n    await expect(\n        request('somewhere', {\n            cache: 'reload',\n            headers: new Headers({\n                Accept: 'text/plain'\n            })\n        })\n    ).resolves.toEqual({\n        some: 'otherdata'\n    });\n});\n\ntest('convenience method creates, runs, and promises a request', async () => {\n    mockFetchReturned({\n        json: {\n            some: 'otherdata'\n        }\n    });\n    await expect(request('somewhere', { cache: 'reload' })).resolves.toEqual({\n        some: 'otherdata'\n    });\n});\n\ntest('convenience method returns a response if parseJSON is false', async () => {\n    mockFetchReturned({\n        json: {\n            some: 'otherdata'\n        }\n    });\n    const response = await request('somewhere', { parseJSON: false });\n    expect(response).toBeInstanceOf(Response);\n    await expect(response.json()).resolves.toEqual({\n        some: 'otherdata'\n    });\n});\n"],"file":"M2ApiRequest.spec.js"}