{"version":3,"sources":["../../../../src/RestApi/Magento2/__tests__/M2ApiResponseError.spec.js"],"names":["M2ApiResponseError","test","method","resourceUrl","response","status","statusText","bodyText","JSON","stringify","message","trace","expect","toMatchSnapshot","randomProp","capture","Error","captureStackTrace"],"mappings":"AAAA,OAAOA,kBAAP,MAA+B,uBAA/B;AAEAC,IAAI,CAAC,+BAAD,EAAkC,YAAM;AAAA,aACpB,IAAID,kBAAJ,CAAuB;AACvCE,IAAAA,MAAM,EAAE,KAD+B;AAEvCC,IAAAA,WAAW,EAAE,UAF0B;AAGvCC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,MAAM,EAAE,GADF;AAENC,MAAAA,UAAU,EAAE;AAFN,KAH6B;AAOvCC,IAAAA,QAAQ,EAAEC,IAAI,CAACC,SAAL,CAAe;AACrBC,MAAAA,OAAO,EAAE,gBADY;AAErBC,MAAAA,KAAK,EAAE;AAFc,KAAf;AAP6B,GAAvB,CADoB;AAAA,MAChCD,OADgC,QAChCA,OADgC;;AAaxCE,EAAAA,MAAM,CAACF,OAAD,CAAN,CAAgBG,eAAhB;AACH,CAdG,CAAJ;AAgBAZ,IAAI,CAAC,iCAAD,EAAoC,YAAM;AAAA,cACtB,IAAID,kBAAJ,CAAuB;AACvCE,IAAAA,MAAM,EAAE,KAD+B;AAEvCC,IAAAA,WAAW,EAAE,UAF0B;AAGvCC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,MAAM,EAAE,GADF;AAENC,MAAAA,UAAU,EAAE;AAFN,KAH6B;AAOvCC,IAAAA,QAAQ,EAAEC,IAAI,CAACC,SAAL,CAAe;AACrBC,MAAAA,OAAO,EAAE,gBADY;AAErBC,MAAAA,KAAK,EAAE,sBAFc;AAGrBG,MAAAA,UAAU,EAAE;AAHS,KAAf;AAP6B,GAAvB,CADsB;AAAA,MAClCJ,OADkC,SAClCA,OADkC;;AAc1CE,EAAAA,MAAM,CAACF,OAAD,CAAN,CAAgBG,eAAhB;AACH,CAfG,CAAJ;AAiBAZ,IAAI,CAAC,iDAAD,EAAoD,YAAM;AAAA,cACtC,IAAID,kBAAJ,CAAuB;AACvCE,IAAAA,MAAM,EAAE,KAD+B;AAEvCC,IAAAA,WAAW,EAAE,UAF0B;AAGvCC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,MAAM,EAAE,GADF;AAENC,MAAAA,UAAU,EAAE;AAFN,KAH6B;AAOvCC,IAAAA,QAAQ,EAAE;AAP6B,GAAvB,CADsC;AAAA,MAClDG,OADkD,SAClDA,OADkD;;AAU1DE,EAAAA,MAAM,CAACF,OAAD,CAAN,CAAgBG,eAAhB;AACH,CAXG,CAAJ;AAaAZ,IAAI,CAAC,sDAAD,EAAyD,YAAM;AAC/D,MAAMc,OAAO,GAAGC,KAAK,CAACC,iBAAtB;AACAD,EAAAA,KAAK,CAACC,iBAAN,GAA0B,IAA1B;AACA,MAAIjB,kBAAJ,CAAuB;AACnBE,IAAAA,MAAM,EAAE,KADW;AAEnBC,IAAAA,WAAW,EAAE,UAFM;AAGnBC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,MAAM,EAAE,GADF;AAENC,MAAAA,UAAU,EAAE;AAFN,KAHS;AAOnBC,IAAAA,QAAQ,EAAE;AAPS,GAAvB;AASAS,EAAAA,KAAK,CAACC,iBAAN,GAA0BF,OAA1B;AACH,CAbG,CAAJ","sourcesContent":["import M2ApiResponseError from '../M2ApiResponseError';\n\ntest('pretty prints a JSON response', () => {\n    const { message } = new M2ApiResponseError({\n        method: 'GET',\n        resourceUrl: 'bad-path',\n        response: {\n            status: 500,\n            statusText: 'Just the worst'\n        },\n        bodyText: JSON.stringify({\n            message: 'Server error 1',\n            trace: 'Server error 1 trace'\n        })\n    });\n    expect(message).toMatchSnapshot();\n});\n\ntest('handles random extra properties', () => {\n    const { message } = new M2ApiResponseError({\n        method: 'GET',\n        resourceUrl: 'bad-path',\n        response: {\n            status: 500,\n            statusText: 'Just the worst'\n        },\n        bodyText: JSON.stringify({\n            message: 'Server error 1',\n            trace: 'Server error 1 trace',\n            randomProp: 12\n        })\n    });\n    expect(message).toMatchSnapshot();\n});\n\ntest('recovers when error properties cannot be parsed', () => {\n    const { message } = new M2ApiResponseError({\n        method: 'GET',\n        resourceUrl: 'bad-path',\n        response: {\n            status: 500,\n            statusText: 'Just the worst'\n        },\n        bodyText: '<p>I am unparseable</p>'\n    });\n    expect(message).toMatchSnapshot();\n});\n\ntest('does not call Error.captureStackTrace if unavailable', () => {\n    const capture = Error.captureStackTrace;\n    Error.captureStackTrace = null;\n    new M2ApiResponseError({\n        method: 'GET',\n        resourceUrl: 'bad-path',\n        response: {\n            status: 500,\n            statusText: 'Just the worst'\n        },\n        bodyText: '<p>I am unparseable</p>'\n    });\n    Error.captureStackTrace = capture;\n});\n"],"file":"M2ApiResponseError.spec.js"}