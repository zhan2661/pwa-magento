{"version":3,"sources":["../../../src/RestApi/Magento2/MulticastCache.js"],"names":["inflight","Map","keyCache","WeakMap","requestToKey","req","key","get","opts","method","body","parts","resourceUrl","push","join","set","match","store","remove","delete"],"mappings":"AAAA;;;;;;;;;;AAUA;;;;;AAKA,IAAMA,QAAQ,GAAG,IAAIC,GAAJ,EAAjB;AAEA;;;;;AAIA,IAAMC,QAAQ,GAAG,IAAIC,OAAJ,EAAjB;AAEA;;;;;;;AAMA,SAASC,YAAT,CAAsBC,GAAtB,EAA2B;AACvB,MAAIC,GAAG,GAAGJ,QAAQ,CAACK,GAAT,CAAaF,GAAb,CAAV;;AACA,MAAI,CAACC,GAAL,EAAU;AAAA,oBACmBD,GAAG,CAACG,IADvB;AAAA,QACEC,MADF,aACEA,MADF;AAAA,QACUC,IADV,aACUA,IADV;AAEN,QAAMC,KAAK,GAAG,CAACF,MAAD,EAASJ,GAAG,CAACO,WAAb,CAAd;;AACA,QAAIF,IAAJ,EAAU;AACNC,MAAAA,KAAK,CAACE,IAAN,CAAWH,IAAX;AACH;;AACDJ,IAAAA,GAAG,GAAGK,KAAK,CAACG,IAAN,CAAW,KAAX,CAAN;AACAZ,IAAAA,QAAQ,CAACa,GAAT,CAAaV,GAAb,EAAkBC,GAAlB;AACH;;AACD,SAAOA,GAAP;AACH;AAED;;;;;;;;AAMA,OAAO,SAASU,KAAT,CAAeX,GAAf,EAAoB;AACvB,SAAOL,QAAQ,CAACO,GAAT,CAAaH,YAAY,CAACC,GAAD,CAAzB,CAAP;AACH;AACD;;;;;;AAKA,OAAO,SAASY,KAAT,CAAeZ,GAAf,EAAoB;AACvBL,EAAAA,QAAQ,CAACe,GAAT,CAAaX,YAAY,CAACC,GAAD,CAAzB,EAAgCA,GAAhC;AACH;AACD;;;;;AAIA,OAAO,SAASa,MAAT,CAAgBb,GAAhB,EAAqB;AACxB,MAAIW,KAAK,CAACX,GAAD,CAAL,KAAeA,GAAnB,EAAwB;AACpBL,IAAAA,QAAQ,CAACmB,MAAT,CAAgBf,YAAY,CAACC,GAAD,CAA5B;AACH;AACJ","sourcesContent":["/**\n * Network requests that have not yet fulfilled, available for sharing with\n * other idempotent and safe M2ApiRequests for the same resource.\n * Resource matching is determined by a string composite [method, path, body].\n *\n * (M2ApiRequests know not to use this cache for create operations, except for\n * singleton create operations like createGuestCart, which have no body.)\n * @module MulticastCache\n */\n\n/**\n * String keyed map of in-flight requests. When a request completes,\n * it should be removed.\n * @private\n */\nconst inflight = new Map();\n\n/**\n * Reference cache to reduce repetitive requestToKey() calls.\n * @private\n */\nconst keyCache = new WeakMap();\n\n/**\n *\n * @private\n * @param {M2ApiRequest} req\n * @return string Key for use in inflight cache.\n */\nfunction requestToKey(req) {\n    let key = keyCache.get(req);\n    if (!key) {\n        const { method, body } = req.opts;\n        const parts = [method, req.resourceUrl];\n        if (body) {\n            parts.push(body);\n        }\n        key = parts.join('|||');\n        keyCache.set(req, key);\n    }\n    return key;\n}\n\n/**\n * Returns any inflight request with the same key as the supplied request.\n * May be the same request itself!\n * @param {M2ApiRequest} req The request to match.\n * @return {M2ApiRequest} A request with the same method, body, and resourceUrl..\n */\nexport function match(req) {\n    return inflight.get(requestToKey(req));\n}\n/**\n * Store a request for potential future multicast.\n * Adds a callback to delete the request when it has settled.\n * @param {M2ApiRequest} req The request to store.\n */\nexport function store(req) {\n    inflight.set(requestToKey(req), req);\n}\n/**\n * Remove a request from cache if it exists there.\n * @param {M2ApiRequest} req\n */\nexport function remove(req) {\n    if (match(req) === req) {\n        inflight.delete(requestToKey(req));\n    }\n}\n"],"file":"MulticastCache.js"}