{"version":3,"sources":["../../src/Price/Price.js"],"names":["React","PureComponent","Fragment","number","string","shape","patches","Price","props","value","currencyCode","classes","parts","toParts","call","Intl","NumberFormat","undefined","style","currency","children","map","part","i","partClass","type","key","isRequired","integer","decimal","fraction"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,QAA+C,OAA/C;AACA,SAASC,MAAT,EAAiBC,MAAjB,EAAyBC,KAAzB,QAAsC,YAAtC;AACA,OAAOC,OAAP,MAAoB,qBAApB;AAEA;;;;;;;;;;;IAUqBC,K;;;;;;;;;;;;;6BAyBR;AAAA,wBACoC,KAAKC,KADzC;AAAA,UACGC,KADH,eACGA,KADH;AAAA,UACUC,YADV,eACUA,YADV;AAAA,UACwBC,OADxB,eACwBA,OADxB;AAGL,UAAMC,KAAK,GAAGN,OAAO,CAACO,OAAR,CAAgBC,IAAhB,CACVC,IAAI,CAACC,YAAL,CAAkBC,SAAlB,EAA6B;AACzBC,QAAAA,KAAK,EAAE,UADkB;AAEzBC,QAAAA,QAAQ,EAAET;AAFe,OAA7B,CADU,EAKVD,KALU,CAAd;AAQA,UAAMW,QAAQ,GAAGR,KAAK,CAACS,GAAN,CAAU,UAACC,IAAD,EAAOC,CAAP,EAAa;AACpC,YAAMC,SAAS,GAAGb,OAAO,CAACW,IAAI,CAACG,IAAN,CAAzB;AACA,YAAMC,GAAG,aAAMH,CAAN,cAAWD,IAAI,CAACb,KAAhB,CAAT;AAEA,eACI;AAAM,UAAA,GAAG,EAAEiB,GAAX;AAAgB,UAAA,SAAS,EAAEF;AAA3B,WACKF,IAAI,CAACb,KADV,CADJ;AAKH,OATgB,CAAjB;AAWA,aAAO,oBAAC,QAAD,QAAWW,QAAX,CAAP;AACH;;;;EAhD8BnB,a;;gBAAdM,K,eACE;AACf;;;AAGAE,EAAAA,KAAK,EAAEN,MAAM,CAACwB,UAJC;;AAKf;;;AAGAjB,EAAAA,YAAY,EAAEN,MAAM,CAACuB,UARN;;AASf;;;AAGAhB,EAAAA,OAAO,EAAEN,KAAK,CAAC;AACXc,IAAAA,QAAQ,EAAEf,MADC;AAEXwB,IAAAA,OAAO,EAAExB,MAFE;AAGXyB,IAAAA,OAAO,EAAEzB,MAHE;AAIX0B,IAAAA,QAAQ,EAAE1B;AAJC,GAAD;AAZC,C;;gBADFG,K,kBAqBK;AAClBI,EAAAA,OAAO,EAAE;AADS,C;;SArBLJ,K","sourcesContent":["import React, { PureComponent, Fragment } from 'react';\nimport { number, string, shape } from 'prop-types';\nimport patches from '../util/intlPatches';\n\n/**\n * The **Price** component is used anywhere a price needs to be displayed.\n *\n * Formatting of prices and currency symbol selection is handled entirely by the ECMAScript Internationalization API available in modern browsers.\n *\n * A [polyfill][] is required for any JavaScript runtime that does not have [Intl.NumberFormat.prototype.formatToParts][].\n *\n * [polyfill]: https://www.npmjs.com/package/intl\n * [Intl.NumberFormat.prototype.formatToParts]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/formatToParts\n */\nexport default class Price extends PureComponent {\n    static propTypes = {\n        /**\n         * The numeric price\n         */\n        value: number.isRequired,\n        /**\n         * A string with any of the currency code supported by Intl.NumberFormat\n         */\n        currencyCode: string.isRequired,\n        /**\n         * Class names to use when styling this component\n         */\n        classes: shape({\n            currency: string,\n            integer: string,\n            decimal: string,\n            fraction: string\n        })\n    };\n\n    static defaultProps = {\n        classes: {}\n    };\n\n    render() {\n        const { value, currencyCode, classes } = this.props;\n\n        const parts = patches.toParts.call(\n            Intl.NumberFormat(undefined, {\n                style: 'currency',\n                currency: currencyCode\n            }),\n            value\n        );\n\n        const children = parts.map((part, i) => {\n            const partClass = classes[part.type];\n            const key = `${i}-${part.value}`;\n\n            return (\n                <span key={key} className={partClass}>\n                    {part.value}\n                </span>\n            );\n        });\n\n        return <Fragment>{children}</Fragment>;\n    }\n}\n"],"file":"Price.js"}