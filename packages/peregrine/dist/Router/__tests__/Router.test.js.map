{"version":3,"sources":["../../../src/Router/__tests__/Router.test.js"],"names":["React","mount","shallow","MemoryRouter","MagentoRouter","Consumer","RouteConsumer","apiBase","initialEntries","routerProps","test","routesWrapper","find","expect","length","toBe","prop","toBeUndefined","fn","jest","props","using","toHaveBeenCalledWith","objectContaining","history","anything","location","match","wrapper","not","instance","toEqual"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,OAAhB,QAA+B,QAA/B;AACA,SAASC,YAAT,QAA6B,kBAA7B;AAEA,OAAOC,aAAP,IAAwBC,QAAQ,IAAIC,aAApC,QAAyD,WAAzD;AAEA,IAAMC,OAAO,GAAG,mBAAhB;AAEA,IAAMC,cAAc,GAAG,CAAC,oBAAD,CAAvB;AACA,IAAMC,WAAW,GAAG;AAAED,EAAAA,cAAc,EAAdA;AAAF,CAApB;AAEAE,IAAI,CAAC,mCAAD,EAAsC,YAAM;AAC5C,MAAMC,aAAa,GAAGT,OAAO,CACzB,oBAAC,aAAD;AAAe,IAAA,KAAK,EAAEC,YAAtB;AAAoC,IAAA,OAAO,EAAEI;AAA7C,IADyB,CAAP,CAEpBK,IAFoB,CAEf,OAFe,CAAtB;AAGAC,EAAAA,MAAM,CAACF,aAAa,CAACG,MAAf,CAAN,CAA6BC,IAA7B,CAAkC,CAAlC;AACAF,EAAAA,MAAM,CAACF,aAAa,CAACK,IAAd,CAAmB,MAAnB,CAAD,CAAN,CAAmCC,aAAnC;AACH,CANG,CAAJ;AAQAP,IAAI,CAAC,qDAAD,EAAwD,YAAM;AAC9D,MAAMQ,EAAE,GAAGC,IAAI,CAACD,EAAL,EAAX;AACA,MAAME,KAAK,GAAG;AAAEb,IAAAA,OAAO,EAAPA,OAAF;AAAWc,IAAAA,KAAK,EAAElB;AAAlB,GAAd,CAF8D,CAI9D;;AACAF,EAAAA,KAAK,CACD,oBAAC,aAAD,EAAmBmB,KAAnB,EACI,oBAAC,aAAD,QAAgBF,EAAhB,CADJ,CADC,CAAL;AAMAL,EAAAA,MAAM,CAACK,EAAD,CAAN,CAAWI,oBAAX,CACIT,MAAM,CAACU,gBAAP,CAAwB;AACpBhB,IAAAA,OAAO,EAAPA,OADoB;AAEpBiB,IAAAA,OAAO,EAAEX,MAAM,CAACY,QAAP,EAFW;AAEQ;AAC5BC,IAAAA,QAAQ,EAAEb,MAAM,CAACY,QAAP,EAHU;AAGS;AAC7BE,IAAAA,KAAK,EAAEd,MAAM,CAACY,QAAP,EAJa,CAIK;;AAJL,GAAxB,CADJ;AAQH,CAnBG,CAAJ;AAqBAf,IAAI,CAAC,sDAAD,EAAyD,YAAM;AAC/D,MAAMQ,EAAE,GAAGC,IAAI,CAACD,EAAL,EAAX;AACA,MAAME,KAAK,GAAG;AAAEb,IAAAA,OAAO,EAAPA,OAAF;AAAWE,IAAAA,WAAW,EAAXA,WAAX;AAAwBY,IAAAA,KAAK,EAAElB;AAA/B,GAAd,CAF+D,CAI/D;;AACA,MAAMyB,OAAO,GAAG3B,KAAK,CACjB,oBAAC,aAAD,EAAmBmB,KAAnB,EACI,oBAAC,aAAD,QAAgBF,EAAhB,CADJ,CADiB,CAArB;AAMAL,EAAAA,MAAM,CAACK,EAAD,CAAN,CAAWI,oBAAX,CACIT,MAAM,CAACgB,GAAP,CAAWN,gBAAX,CAA4B;AACxBf,IAAAA,cAAc,EAAEK,MAAM,CAACY,QAAP;AADQ,GAA5B,CADJ;AAKAZ,EAAAA,MAAM,CAACe,OAAO,CAAChB,IAAR,CAAa,QAAb,EAAuBkB,QAAvB,GAAkCV,KAAnC,CAAN,CAAgDW,OAAhD,CACIlB,MAAM,CAACU,gBAAP,CAAwB,EAAxB,CADJ;AAGAV,EAAAA,MAAM,CAACK,EAAD,CAAN,CAAWI,oBAAX,CACIT,MAAM,CAACU,gBAAP,CAAwB;AACpBC,IAAAA,OAAO,EAAEX,MAAM,CAACU,gBAAP,CAAwB;AAC7BT,MAAAA,MAAM,EAAEN,cAAc,CAACM;AADM,KAAxB;AADW,GAAxB,CADJ;AAOH,CA1BG,CAAJ","sourcesContent":["import React from 'react';\nimport { mount, shallow } from 'enzyme';\nimport { MemoryRouter } from 'react-router-dom';\n\nimport MagentoRouter, { Consumer as RouteConsumer } from '../Router';\n\nconst apiBase = 'https://store.com';\n\nconst initialEntries = ['/some-product.html'];\nconst routerProps = { initialEntries };\n\ntest('renders a single, catch-all route', () => {\n    const routesWrapper = shallow(\n        <MagentoRouter using={MemoryRouter} apiBase={apiBase} />\n    ).find('Route');\n    expect(routesWrapper.length).toBe(1);\n    expect(routesWrapper.prop('path')).toBeUndefined();\n});\n\ntest('passes `config` and route props to context provider', () => {\n    const fn = jest.fn();\n    const props = { apiBase, using: MemoryRouter };\n\n    // we need to test context consumer, so we can't shallow render\n    mount(\n        <MagentoRouter {...props}>\n            <RouteConsumer>{fn}</RouteConsumer>\n        </MagentoRouter>\n    );\n\n    expect(fn).toHaveBeenCalledWith(\n        expect.objectContaining({\n            apiBase,\n            history: expect.anything(), // from Route\n            location: expect.anything(), // from Route\n            match: expect.anything() // from Route\n        })\n    );\n});\n\ntest('passes `routerProps` to router, not context provider', () => {\n    const fn = jest.fn();\n    const props = { apiBase, routerProps, using: MemoryRouter };\n\n    // we need to test context consumer, so we can't shallow render\n    const wrapper = mount(\n        <MagentoRouter {...props}>\n            <RouteConsumer>{fn}</RouteConsumer>\n        </MagentoRouter>\n    );\n\n    expect(fn).toHaveBeenCalledWith(\n        expect.not.objectContaining({\n            initialEntries: expect.anything()\n        })\n    );\n    expect(wrapper.find('Router').instance().props).toEqual(\n        expect.objectContaining({})\n    );\n    expect(fn).toHaveBeenCalledWith(\n        expect.objectContaining({\n            history: expect.objectContaining({\n                length: initialEntries.length\n            })\n        })\n    );\n});\n"],"file":"Router.test.js"}