{"version":3,"sources":["../../src/Router/resolveUnknownRoute.js"],"names":["numRE","castDigitsToNum","str","test","Number","resolveUnknownRoute","opts","route","apiBase","preloadDone","preloadAttrs","document","body","dataset","modelType","type","id","modelId","preloadScript","getElementById","preload","JSON","parse","textContent","process","env","NODE_ENV","console","error","preloaded","remotelyResolveRoute","urlResolve","localStorage","getItem","navigator","onLine","Promise","resolve","data","urlResolver","fetchRoute","url","URL","fetch","method","credentials","headers","Headers","stringify","query","trim","then","res","json","storeURLResolveResult","storedRoute","item","setItem"],"mappings":"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","sourcesContent":["/**\n * @description Given a route string, resolves with the \"standard route\", along\n * with the assigned Root Component (and its owning chunk) from the backend\n * @param {{ route: string, apiBase: string, __tmp_webpack_public_path__: string}} opts\n */\n\n// Some M2.3.0 GraphQL node IDs are numbers and some are strings, so explicitly\n// cast numbers if they appear to be numbers\nconst numRE = /^\\d+$/;\nconst castDigitsToNum = str =>\n    typeof str === 'string' && numRE.test(str) ? Number(str) : str;\nexport default async function resolveUnknownRoute(opts) {\n    const { route, apiBase } = opts;\n\n    if (!resolveUnknownRoute.preloadDone) {\n        resolveUnknownRoute.preloadDone = true;\n\n        // Templates may use the new style (data attributes on the body tag),\n        // or the old style (handwritten JSON in a script element).\n\n        // New style:\n        const preloadAttrs = document.body.dataset;\n        if (preloadAttrs && preloadAttrs.modelType) {\n            return {\n                type: preloadAttrs.modelType,\n                id: castDigitsToNum(preloadAttrs.modelId)\n            };\n        }\n\n        // Old style:\n        const preloadScript = document.getElementById('url-resolver');\n        if (preloadScript) {\n            try {\n                const preload = JSON.parse(preloadScript.textContent);\n                return {\n                    type: preload.type,\n                    id: castDigitsToNum(preload.id)\n                };\n            } catch (e) {\n                // istanbul ignore next: will never happen in test\n                if (process.env.NODE_ENV === 'development') {\n                    console.error(\n                        'Unable to read preload!',\n                        preloaded.textContent,\n                        e\n                    );\n                }\n            }\n        }\n    }\n\n    return remotelyResolveRoute({\n        route,\n        apiBase\n    });\n}\n\n/**\n * @description Checks if route is stored in localStorage, if not call `fetchRoute`\n * @param {{ route: string, apiBase: string}} opts\n * @returns {Promise<{type: \"PRODUCT\" | \"CATEGORY\" | \"CMS_PAGE\"}>}\n */\nfunction remotelyResolveRoute(opts) {\n    let urlResolve = localStorage.getItem('urlResolve');\n    urlResolve = JSON.parse(urlResolve);\n\n    // If it exists in localStorage, use that value\n    // TODO: This can be handled by workbox once this issue is resolved in the\n    // graphql repo: https://github.com/magento/graphql-ce/issues/229\n    if ((urlResolve && urlResolve[opts.route]) || !navigator.onLine) {\n        if (urlResolve && urlResolve[opts.route]) {\n            return Promise.resolve(urlResolve[opts.route].data.urlResolver);\n        } else {\n            return Promise.resolve({\n                type: 'NOTFOUND',\n                id: -1\n            });\n        }\n    } else {\n        return fetchRoute(opts);\n    }\n}\n\n/**\n * @description Calls the GraphQL API for results from the urlResolver query\n * @param {{ route: string, apiBase: string}} opts\n * @returns {Promise<{type: \"PRODUCT\" | \"CATEGORY\" | \"CMS_PAGE\"}>}\n */\nfunction fetchRoute(opts) {\n    const url = new URL('/graphql', opts.apiBase);\n    return fetch(url, {\n        method: 'POST',\n        credentials: 'include',\n        headers: new Headers({\n            'Content-Type': 'application/json'\n        }),\n        body: JSON.stringify({\n            query: `\n                {\n                    urlResolver(url: \"${opts.route}\") {\n                        type\n                        id\n                    }\n                }\n            `.trim()\n        })\n    })\n        .then(res => res.json())\n        .then(res => {\n            storeURLResolveResult(res, opts);\n            return res.data.urlResolver;\n        });\n}\n\n// TODO: This can be handled by workbox once this issue is resolved in the\n// graphql repo: https://github.com/magento/graphql-ce/issues/229\nfunction storeURLResolveResult(res, opts) {\n    const storedRoute = localStorage.getItem('urlResolve');\n    const item = JSON.parse(storedRoute) || {};\n\n    item[opts.route] = res;\n    localStorage.setItem('urlResolve', JSON.stringify(item));\n}\n"],"file":"resolveUnknownRoute.js"}