import React, { Fragment } from 'react';
import { shallow } from 'enzyme';
import { Items } from '..';
var items = [{
  id: '001',
  name: 'Test Product 1',
  small_image: '/test/product/1.png',
  price: {
    regularPrice: {
      amount: {
        value: 100
      }
    }
  }
}, {
  id: '002',
  name: 'Test Product 2',
  small_image: '/test/product/2.png',
  price: {
    regularPrice: {
      amount: {
        value: 100
      }
    }
  }
}];
test('renders a fragment', function () {
  var props = {
    items: items
  };
  var wrapper = shallow(React.createElement(Items, props));
  expect(wrapper.type()).toEqual(Fragment);
});
test('renders a child for each item', function () {
  var props = {
    items: items
  };
  var wrapper = shallow(React.createElement(Items, props));
  expect(wrapper.children()).toHaveLength(items.length);
});
test('renders basic children of type `renderItem`', function () {
  var elementType = 'li';
  var props = {
    items: items,
    renderItem: elementType
  };
  var wrapper = shallow(React.createElement(Items, props));
  expect.assertions(items.length);
  wrapper.children().forEach(function (node) {
    expect(node.dive().dive().type()).toEqual(elementType);
  });
});
test('renders composite children of type `renderItem`', function () {
  var Span = function Span() {
    return React.createElement("span", null);
  };

  var props = {
    items: items,
    renderItem: Span
  };
  var wrapper = shallow(React.createElement(Items, props));
  expect.assertions(items.length);
  wrapper.children().forEach(function (node) {
    expect(node.dive().type()).toEqual(Span);
  });
});
test('passes correct props to each child', function () {
  var elementType = 'li';
  var props = {
    items: items,
    renderItem: elementType
  };
  var wrapper = shallow(React.createElement(Items, props));
  wrapper.children().forEach(function (node, i) {
    var item = items[i];
    var key = item.id;
    expect(node.key()).toEqual(key);
    expect(node.props()).toMatchObject({
      item: item,
      itemIndex: i,
      render: props.renderItem,
      hasFocus: false,
      isSelected: false,
      onBlur: wrapper.instance().handleBlur,
      onClick: expect.any(Function),
      onFocus: expect.any(Function)
    });
  });
});
test('uses keys generated by `getItemKey` if provided', function () {
  var identity = function identity(x) {
    return x;
  };

  var tags = ['a', 'b', 'c'];
  var props = {
    items: tags,
    getItemKey: identity
  };
  var wrapper = shallow(React.createElement(Items, props));
  wrapper.children().forEach(function (node, i) {
    expect(node.key()).toEqual(tags[i]);
  });
});
test('indicates the child at index `cursor` has focus', function () {
  var props = {
    items: items
  };
  var wrapper = shallow(React.createElement(Items, props));
  var state = {
    cursor: 1,
    hasFocus: true
  };
  wrapper.setState(state);
  wrapper.children().forEach(function (node, i) {
    var item = items[i];
    expect(node.props()).toMatchObject({
      item: item,
      hasFocus: i === state.cursor,
      isSelected: false
    });
  });
});
test('indicates no child has focus if the list is not focused', function () {
  var props = {
    items: items
  };
  var wrapper = shallow(React.createElement(Items, props));
  var state = {
    cursor: 1,
    hasFocus: false
  };
  wrapper.setState(state);
  wrapper.children().forEach(function (node, i) {
    var item = items[i];
    expect(node.props()).toMatchObject({
      item: item,
      hasFocus: false,
      isSelected: false
    });
  });
});
test('indicates whether a child is selected', function () {
  var props = {
    items: items
  };
  var wrapper = shallow(React.createElement(Items, props));
  var selection = new Set().add('002');
  wrapper.setState({
    selection: selection
  });
  wrapper.children().forEach(function (node, i) {
    var item = items[i];
    var key = item.id;
    expect(node.props()).toMatchObject({
      item: item,
      hasFocus: false,
      isSelected: selection.has(key)
    });
  });
});
test('updates `hasFocus` on child blur', function () {
  var props = {
    items: items
  };
  var wrapper = shallow(React.createElement(Items, props));
  wrapper.setState({
    hasFocus: true
  });
  wrapper.childAt(0).simulate('blur');
  expect(wrapper.state('hasFocus')).toBe(false);
});
test('updates `cursor` and `hasFocus` on child focus', function () {
  var props = {
    items: items
  };
  var wrapper = shallow(React.createElement(Items, props));
  var index = 0;
  wrapper.childAt(index).simulate('focus');
  expect(wrapper.state()).toMatchObject({
    cursor: index,
    hasFocus: true
  });
});
test('updates radio `selection` on child click', function () {
  var props = {
    items: items
  };
  var wrapper = shallow(React.createElement(Items, props));
  expect(wrapper.state('selection')).toEqual(new Set());
  wrapper.childAt(0).simulate('click');
  expect(wrapper.state('selection')).toEqual(new Set(['001']));
  wrapper.childAt(1).simulate('click');
  expect(wrapper.state('selection')).toEqual(new Set(['002']));
  wrapper.childAt(0).simulate('click');
  expect(wrapper.state('selection')).toEqual(new Set(['001']));
});
test('updates checkbox `selection` on child click', function () {
  var props = {
    items: items,
    selectionModel: 'checkbox'
  };
  var wrapper = shallow(React.createElement(Items, props));
  expect(wrapper.state('selection')).toEqual(new Set());
  wrapper.childAt(0).simulate('click');
  expect(wrapper.state('selection')).toEqual(new Set(['001']));
  wrapper.childAt(1).simulate('click');
  expect(wrapper.state('selection')).toEqual(new Set(['001', '002']));
  wrapper.childAt(0).simulate('click');
  expect(wrapper.state('selection')).toEqual(new Set(['002']));
});
test('calls `syncSelection` after updating selection', function () {
  var props = {
    items: items
  };
  var wrapper = shallow(React.createElement(Items, props));
  var spy = jest.spyOn(wrapper.instance(), 'syncSelection');
  wrapper.childAt(0).simulate('click');
  expect(spy).toHaveBeenCalled();
});
test('calls `onSelectionChange` after updating selection', function () {
  var onSelectionChange = jest.fn();
  var props = {
    items: items,
    onSelectionChange: onSelectionChange
  };
  var wrapper = shallow(React.createElement(Items, props));
  wrapper.childAt(0).simulate('click');
  expect(onSelectionChange).toHaveBeenCalledWith(wrapper.state('selection'));
});
test('memoizes child click handlers', function () {
  var props = {
    items: items
  };
  var instance = shallow(React.createElement(Items, props)).instance();
  expect(instance.getClickHandler(0)).not.toBe(instance.getClickHandler(1));
  expect(instance.getClickHandler(0)).toBe(instance.getClickHandler(0));
});
test('memoizes child focus handlers', function () {
  var props = {
    items: items
  };
  var instance = shallow(React.createElement(Items, props)).instance();
  expect(instance.getFocusHandler(0)).not.toBe(instance.getFocusHandler(1));
  expect(instance.getFocusHandler(0)).toBe(instance.getFocusHandler(0));
});
//# sourceMappingURL=items.spec.js.map