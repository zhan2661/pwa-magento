{"version":3,"sources":["../../../src/WebpackTools/plugins/UpwardPlugin.js"],"names":["debug","require","makeFileLogger","__filename","fetch","path","https","url","upward","httpsAgent","Agent","rejectUnauthorized","UpwardPlugin","constructor","devServer","env","upwardPath","Object","assign","NODE_ENV","oldBefore","before","app","rest","use","bestPractices","oldAfter","after","req","res","next","handleRequest","apply","compiler","resolveCompiler","middlewarePromise","createMiddleware","middleware","getCompiler","defaultIO","IOAdapter","default","io","readFile","filepath","enc","absolutePath","resolve","options","output","outputFileSystem","readFileSync","e","message","fromDefault","inputFileSystem","networkFetch","protocol","URL","agent","compilerPromise","Promise","module","exports"],"mappings":"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","sourcesContent":["const debug = require('../../util/debug').makeFileLogger(__filename);\nconst fetch = require('node-fetch');\nconst path = require('path');\nconst https = require('https');\nconst url = require('url');\nconst upward = require('@magento/upward-js');\n\n// To be used with `node-fetch` in order to allow self-signed certificates.\nconst httpsAgent = new https.Agent({ rejectUnauthorized: false });\n\nclass UpwardPlugin {\n    constructor(devServer, env, upwardPath) {\n        this.env = Object.assign(\n            {\n                NODE_ENV: 'development'\n            },\n            env\n        );\n        this.upwardPath = upwardPath;\n        // Compose `after` and `before` functions if something else has defined\n        // them.\n        const oldBefore = devServer.before;\n        devServer.before = (app, ...rest) => {\n            app.use(upward.bestPractices());\n            if (oldBefore) oldBefore(app, ...rest);\n        };\n        const oldAfter = devServer.after;\n        devServer.after = (app, ...rest) => {\n            if (oldAfter) oldAfter(app, ...rest);\n            app.use((req, res, next) => this.handleRequest(req, res, next));\n        };\n    }\n    apply(compiler) {\n        this.compiler = compiler;\n        // If a request has run to the devServer before this method has run,\n        // then there is already a Promise pending for the compiler, and this is\n        // its resolver.\n        if (this.resolveCompiler) {\n            this.resolveCompiler(compiler);\n        }\n    }\n    // Hold the first request (and subsequent requests) until the middleware is\n    // created, then swap out `handleRequest` for the simplest stack trace.\n    async handleRequest(req, res, next) {\n        // Several requests may come in. Only create the middleware once.\n        if (!this.middlewarePromise) {\n            this.middlewarePromise = this.createMiddleware();\n        }\n        await this.middlewarePromise;\n        // When the promise is resolved, `this.middleware` will exist.\n        // Replace this function itself.\n        this.handleRequest = this.middleware;\n        // And then call it to finish the response.\n        this.middleware(req, res, next);\n        // Further requests will go straight to the middleware.\n    }\n    async createMiddleware() {\n        // The compiler is necessary to build the fallback filesystem\n        // so UPWARd can use Webpack-generated assets in dev mode.\n        const compiler = await this.getCompiler();\n\n        // Standard filesystem-and-fetch IO.\n        const defaultIO = upward.IOAdapter.default(this.upwardPath);\n\n        // Use Webpack's in-memory file system for UPWARD file retrieval during\n        // development. Allows for hot reloading of server-side configuration.\n\n        const io = {\n            async readFile(filepath, enc) {\n                const absolutePath = path.resolve(\n                    compiler.options.output.path,\n                    filepath\n                );\n                // Most likely scenario: UPWARD needs an output asset.\n                debug('readFile %s %s', filepath, enc);\n                try {\n                    return compiler.outputFileSystem.readFileSync(\n                        absolutePath,\n                        enc\n                    );\n                } catch (e) {\n                    debug(\n                        'outputFileSystem %s %s. Trying defaultIO...',\n                        filepath,\n                        e.message\n                    );\n                }\n                // Next most likely scenario: UPWARD needs a file on disk.\n                try {\n                    const fromDefault = await defaultIO.readFile(filepath, enc);\n                    return fromDefault;\n                } catch (e) {\n                    debug(\n                        'defaultIO %s %s. Trying inputFileSystem...',\n                        filepath,\n                        e.message\n                    );\n                }\n\n                try {\n                    // Fallback: Use Webpack's resolution rules.\n                    return compiler.inputFileSystem.readFileSync(filepath, enc);\n                } catch (e) {\n                    debug(\n                        'inputFileSystem %s %s. Must throw...',\n                        filepath,\n                        e.message\n                    );\n                    throw e;\n                }\n            },\n\n            async networkFetch(path, options) {\n                debug('networkFetch %s, %o', path, options);\n                const { protocol } = new url.URL(path);\n                if (protocol === 'https:') {\n                    return fetch(\n                        path,\n                        Object.assign({ agent: httpsAgent }, options)\n                    );\n                }\n                return fetch(path, options);\n                // Use the https.Agent to allow self-signed certificates.\n            }\n        };\n\n        this.middleware = await upward.middleware(\n            this.upwardPath,\n            this.env,\n            io\n        );\n    }\n    async getCompiler() {\n        if (this.compiler) {\n            return this.compiler;\n        }\n        if (!this.compilerPromise) {\n            // Create a promise for the compiler and expose its resolver so it\n            // can be resolved when the `apply` method runs.\n            this.compilerPromise = new Promise(resolve => {\n                this.resolveCompiler = resolve;\n            });\n        }\n        // Share the compiler promise.\n        return this.compilerPromise;\n    }\n}\n\nmodule.exports = UpwardPlugin;\n"],"file":"UpwardPlugin.js"}