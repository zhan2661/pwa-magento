{"version":3,"sources":["../../../../src/WebpackTools/plugins/makeMagentoRootComponentsPlugin/index.js"],"names":["readFile","fsReadFile","require","promisify","ProvidePlugin","readdir","directiveParser","VirtualModulePlugin","isAbsolute","join","relative","toRootComponentMapKey","type","variant","MagentoRootComponentsPlugin","constructor","opts","apply","compiler","moduleName","contents","fetchRootComponent","buildFetchModule","context","rootComponentsDirs","rootComponentsDirsAbs","map","dir","rootComponentImporters","reduce","importersPromise","rootComponentDir","importerSources","rootComponentFiles","basePath","deep","filter","Promise","all","rootComponentFile","rootComponentSource","directives","errors","length","rootComponentDirectives","d","console","warn","pageTypes","forEach","pageType","key","resolve","Object","entries","entry","toString","makeRootComponentsPlugin","plugin","module","exports"],"mappings":"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","sourcesContent":["const { readFile: fsReadFile } = require('fs');\nconst readFile = require('util').promisify(fsReadFile);\nconst { ProvidePlugin } = require('webpack');\nconst readdir = require('readdir-enhanced');\nconst directiveParser = require('@magento/directive-parser');\nconst VirtualModulePlugin = require('virtual-module-webpack-plugin');\nconst { isAbsolute, join, relative } = require('path');\n\nconst toRootComponentMapKey = (type, variant = 'default') =>\n    `RootCmp_${type}__${variant}`;\n\n/**\n * @description webpack plugin that creates chunks for each\n * individual RootComponent in a provided array of directories, and produces a\n * file which imports each one as a separate chunk.\n */\nclass MagentoRootComponentsPlugin {\n    /**\n     * @param {object} opts\n     * @param {string[]} opts.rootComponentsDirs All directories to be searched for RootComponents\n     */\n    constructor(opts) {\n        this.opts = opts;\n    }\n\n    apply(compiler) {\n        // Provide `fetchRootComponent` as a global: Expose the source as a\n        // module, and then use a ProvidePlugin to inline it.\n        new VirtualModulePlugin({\n            moduleName: 'FETCH_ROOT_COMPONENT',\n            contents: this.contents\n        }).apply(compiler);\n        new ProvidePlugin({\n            fetchRootComponent: 'FETCH_ROOT_COMPONENT'\n        }).apply(compiler);\n    }\n\n    async buildFetchModule() {\n        const { context, rootComponentsDirs } = this.opts;\n\n        // Create a list of absolute paths for root components. When a\n        // relative path is found, resolve it from the root context of\n        // the webpack build\n        const rootComponentsDirsAbs = rootComponentsDirs.map(dir =>\n            isAbsolute(dir) ? dir : join(context, dir)\n        );\n        const rootComponentImporters = await rootComponentsDirsAbs.reduce(\n            async (importersPromise, rootComponentDir) => {\n                const importerSources = await importersPromise;\n                const rootComponentFiles = await readdir(rootComponentDir, {\n                    basePath: rootComponentDir,\n                    deep: true,\n                    filter: /m?[jt]s$/\n                });\n                await Promise.all(\n                    rootComponentFiles.map(async rootComponentFile => {\n                        const rootComponentSource = await readFile(\n                            rootComponentFile,\n                            'utf8'\n                        );\n                        const { directives = [], errors } = directiveParser(\n                            rootComponentSource\n                        );\n                        if (errors.length) {\n                            // for now, errors just mean no directive was found\n                            return;\n                        }\n                        const rootComponentDirectives = directives.filter(\n                            d => d.type === 'RootComponent'\n                        );\n\n                        if (rootComponentDirectives.length === 0) {\n                            return;\n                        }\n\n                        if (rootComponentDirectives.length > 1) {\n                            console.warn(\n                                `Found more than 1 RootComponent Directive in ${rootComponentFile}. Only the first will be used`\n                            );\n                        }\n\n                        const {\n                            pageTypes,\n                            variant\n                        } = rootComponentDirectives[0];\n\n                        if (!pageTypes || pageTypes.length === 0) {\n                            console.warn(\n                                `No pageTypes specified for RootComponent ${rootComponentFile}. RootComponent will never be used.`\n                            );\n                        } else {\n                            pageTypes.forEach(pageType => {\n                                const key = toRootComponentMapKey(\n                                    pageType,\n                                    variant\n                                );\n                                importerSources[\n                                    key\n                                ] = `() => import(/* webpackChunkName: \"${key}\" */'${relative(\n                                    context,\n                                    rootComponentFile\n                                )}')`;\n                            });\n                        }\n                    })\n                );\n                return importerSources;\n            },\n            Promise.resolve({})\n        );\n\n        this.contents = `\nconst rootComponentsMap = {\n${Object.entries(rootComponentImporters)\n    .map(entry => entry.join(':'))\n    .join(',\\n')}\n};\nconst key = ${toRootComponentMapKey.toString()};\nexport default function fetchRootComponent(type, variant = 'default') {\n    return rootComponentsMap[key(type, variant)]().then(m => m.default || m);\n};\n`;\n    }\n}\n\nasync function makeRootComponentsPlugin(opts) {\n    const plugin = new MagentoRootComponentsPlugin(opts);\n    await plugin.buildFetchModule();\n    return plugin;\n}\n\nmodule.exports = makeRootComponentsPlugin;\n"],"file":"index.js"}