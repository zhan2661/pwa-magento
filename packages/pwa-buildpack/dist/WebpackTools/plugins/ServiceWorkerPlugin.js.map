{"version":3,"sources":["../../../src/WebpackTools/plugins/ServiceWorkerPlugin.js"],"names":["WorkboxPlugin","require","WriteFileWebpackPlugin","optionsValidator","ServiceWorkerPlugin","constructor","config","validateOptions","applyGenerateSW","compiler","globDirectory","paths","output","globPatterns","skipWaiting","swDest","serviceWorkerFileName","runtimeCacheConfig","runtimeCaching","GenerateSW","apply","configureInjectManifest","injectManifest","injectManifestConfig","InjectManifest","swSrc","src","dest","applyInjectManifest","env","mode","enableServiceWorkerDebugging","test","RegExp","log","console","warn","applyWorkbox","module","exports"],"mappings":"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","sourcesContent":["// TODO: (p1) write test file and test\nconst WorkboxPlugin = require('workbox-webpack-plugin');\nconst WriteFileWebpackPlugin = require('write-file-webpack-plugin');\nconst optionsValidator = require('../../util/options-validator');\n\nclass ServiceWorkerPlugin {\n    static validateOptions = optionsValidator('ServiceWorkerPlugin', {\n        'env.mode': 'string',\n        serviceWorkerFileName: 'string',\n        'paths.output': 'string'\n    });\n    constructor(config) {\n        ServiceWorkerPlugin.validateOptions('ServiceWorkerPlugin', config);\n        this.config = config;\n    }\n    applyGenerateSW(compiler) {\n        const config = {\n            // `globDirectory` and `globPatterns` must match at least 1 file\n            // otherwise workbox throws an error\n            globDirectory: this.config.paths.output,\n            // TODO: (feature) autogenerate glob patterns from asset manifest\n            globPatterns: ['**/*.{gif,jpg,png,svg}'],\n\n            // activate the worker as soon as it reaches the waiting phase\n            skipWaiting: true,\n\n            // the max scope of a worker is its location\n            swDest: this.config.serviceWorkerFileName\n        };\n\n        if (this.config.runtimeCacheConfig) {\n            config.runtimeCaching = this.config.runtimeCacheConfig;\n        }\n        new WorkboxPlugin.GenerateSW(config).apply(compiler);\n    }\n\n    configureInjectManifest() {\n        let injectManifest;\n        if (this.config.injectManifestConfig) {\n            injectManifest = new WorkboxPlugin.InjectManifest(\n                this.config.injectManifestConfig\n            );\n        } else {\n            injectManifest = new WorkboxPlugin.InjectManifest({\n                swSrc: this.config.paths.src + '/sw.js',\n                swDest: this.config.paths.dest + '/sw.js'\n            });\n        }\n        return injectManifest;\n    }\n\n    applyInjectManifest(compiler) {\n        this.configureInjectManifest().apply(compiler);\n    }\n\n    apply(compiler) {\n        if (this.config.env.mode === 'development') {\n            // add a WriteFilePlugin to write out the service worker to the filesystem so it can be served by M2, even though it's under dev\n            if (\n                this.config.enableServiceWorkerDebugging &&\n                !this.config.injectManifest\n            ) {\n                new WriteFileWebpackPlugin({\n                    test: new RegExp(this.config.serviceWorkerFileName + '$'),\n                    log: true\n                }).apply(compiler);\n                this.applyGenerateSW(compiler);\n            } else if (\n                this.config.enableServiceWorkerDebugging &&\n                this.config.injectManifest\n            ) {\n                this.applyInjectManifest(compiler);\n            } else {\n                // TODO: (feature) emit a structured { code, severity, resolution } object\n                // on Environment that might throw and might not\n                console.warn(\n                    `Emitting no ServiceWorker in development mode. To enable development mode for ServiceWorkers, pass \\`enableServiceWorkerDebugging: true\\` to the ServiceWorkerPlugin configuration.`\n                );\n            }\n        } else {\n            this.applyWorkbox(compiler);\n        }\n    }\n\n    applyWorkbox(compiler) {\n        if (this.config.injectManifest) {\n            this.applyInjectManifest(compiler);\n        } else {\n            this.applyGenerateSW(compiler);\n        }\n    }\n}\nmodule.exports = ServiceWorkerPlugin;\n"],"file":"ServiceWorkerPlugin.js"}